---
layout: app
path: library
# Non public facing DELETE ME
---

<section class="hero">
  <h1>Library</h1>
  <p class="text-balance">
    A playground to build out components and utilites that can be stored as a
    template.
    <br class="xl-up" />
    Pick what you need from the library and then be sure to delete the
    following:
  </p>
  <ol>
    <li>JS library directory</li>
    <li>JS animations.js library blocks</li>
    <li>CSS library directory</li>
    <li>CSS utillity.scss library block</li>
    <li>_data library directory</li>
    <li>_includes library directory</li>
    <li>img Folder library directory</li>
  </ol>
</section>

<section class="library-section">
  <h2 class="h5">[ Gradient border - Util ]</h2>
  <p>Gradient borders</p>

  <div class="gradient-border">
    <h3 class="h6">Gradient border</h3>
    <p>Wow so cool! Lorem ipsum dolor sit, amet consectetur adipisicing elit. Molestiae commodi veritatis totam harum accusamus quia sint aliquam quod non, earum reiciendis, minus consequuntur dolores.</p>
  </div>
</section>

<section class="library-section hide-cursor">
  <h2 class="h5">[ Tooltip - Usage ]</h2>

  <h3 class="h6">Tooltip Component (static)</h3>
  <p>The tooltip component can be used as a component or a utility class.</p>
  
  {% set tooltip_data = library.tooltip.tooltip_1 %}
  {% include "./_includes/library/tooltip.njk" %}
  
  {% set tooltip_data = library.tooltip.tooltip_2 %}
  {% include "./_includes/library/tooltip.njk" %}
  
  <div>
    <p>
      Does this work inline?  
      {% set tooltip_data = library.tooltip.tooltip_3 %}
      {% include "./_includes/library/tooltip.njk" %}
      then some text afterward.
    </p>
  </div>
  
  <br aria-hidden="true">
  <br aria-hidden="true">
  <h3 class="h6">Tooltip Util (follow mouse)</h3>
  <p>Need to find a way to make this keyboard & mobile accessible ðŸ¤”</p>
  <p 
    class="tooltip-util" 
    data-tooltip-message="This is the tooltip message"
    data-tooltip-min-width="212"
    >
    Tooltip util
  </p>
  <img 
    class="tooltip-util small-icon" 
    data-tooltip-message="What happens when you have a really long description? Does it mess things up pretty badly or does it still work? Iâ€™m curious how this will turn out."
    data-tooltip-min-width="250"
    src="/static/img/library/icon-google-info.svg" 
    alt="" 
    eleventy:ignore
  />
</section>

<section class="image-comparison-section library-section">
  <h2 class="h5">[ Image Comparison - Component ]</h2>
</section>

<section class="counter-section">
  <h2 class="h5">[ Counter - Component ]</h2>

  <p>The counter can be used to reflect stats and showcase data. It comes with a wide range of configs.</p>
  <ul class="classic-list">
    <li><code>digit</code> takes a numeric value</li>
    <li><code>prefix</code> an optional string at the start of the digit e.g. $</li>
    <li><code>suffix</code> an optional string at the end of the digit e.g. M</li>
    <li><code>label</code> a string describing what the stat measures</li>
    <li><code>duration</code> a number (in ms) for the count to complete the animation</li>
    <li><code>once</code> a boolean for whether or not this should animate each time it comes into view</li>
    <li><code>class</code> a string value for a custom css class</li>
  </ul>

  <div class="counter-section__group">
    {% set counter_data = library.counter.counter_1 %}
    {% include "./_includes/library/counter.njk" %}
    
    {% set counter_data = library.counter.counter_2 %}
    {% include "./_includes/library/counter.njk" %}
    
    {% set counter_data = library.counter.counter_3 %}
    {% include "./_includes/library/counter.njk" %}
  </div>
</section>

<section class="glitch-text-section library-section">
  <h2 class="h5">
    [
    <span class="glitch-scroll"
      >Glitch Text</span
    >
    -
    <span
      class="glitch-cycle"
      data-glitch-cycle-words="Utility, Class, Block"
    >
      Utility</span
    >
    ]
  </h2>
  <p>While not required, there is a class: <code>glitch-text</code>, that clips the max width to the content width to prevent overshooting. This could be used for other variable/util needs.</p>

  <h3 class="h6">Glitch Cycle</h3>
  <p>The glitch cycle uses the <code>glitch-cycle</code> class along with multiple <code>data</code> attributes to configure.</p>
  <ul class="classic-list">
    <li><code>data-glitch-cycle-words="creative, responsive, accessible, innovative, engaging"</code></li>
    <li><code>data-glitch-cycle-colors="#e48c66, #007bff, var(--color-font--primary), #c0c0c0, #007bff"</code></li>
    <li><code>data-glitch-cycle-interval="2000"</code></li>
  </ul>
  <h6>Hereâ€™s an example:
    <span
      class="glitch-cycle"
      data-glitch-cycle-words="creative, responsive, accessible, innovative, engaging"
      data-glitch-cycle-colors="#e48c66, #007bff, var(--color-font--primary), #c0c0c0, #007bff"
      data-glitch-cycle-interval="2000"
    >
      Creative
    </span>
  </h6>

  <br>

  <h3 class="h6">Glitch Scroll</h3>
  <p>The class <code>glitch-scroll</code> will scramble the text when the element comes into view. Using with the attribute: <code>data-glitch-once="true"</code> will toggle the effect to occur only the first time the element scrolls into view.</p>
  <p class="glitch-scroll">This will glitch out as many times as you scroll into view. Default behavior.</p>
  <p class="glitch-scroll" data-glitch-once="true">This will only glitch out once.</p>
  
  <br>
  
  <h3 class="h6">Glitch Hover</h3>
  <p>The class <code>glitch-hover</code> causes the innerText (works with nested elements) to scramble on hover or focus.</p>
  <a href="/" class="cta-1 glitch-hover">Hover over me</a>
  <a href="/" class="classic-link glitch-hover">Hover over me</a>
  
  <br>
  
  <h3 class="h6">Glitch Target</h3>
  <p>The class <code>glitch-trigger</code> will act as the hover/focus point to trigger the glitch elsewhere. This requires the <code>data-glitch-target="glitch-target__arbitrary"</code> which takes a unique value that matches the class of the target. The target will then have the class that matches <code>class="glitch-target__arbitrary"</code></p>
  
  <div class="glitch-pair">
    <p>This one can get tricky with scaling e.g. using target glitch on a component since there would be multiple triggers and targets with the same value. A work around is using a parent wrapper with the class <code>glitch-pair</code> IF the elements are targets in the markup (rather than nested, such as .cta-2).</p>
    <br>
    <br>
    <button class="cta-1 glitch-trigger" data-glitch-target="glitch-target__paragraph">
      Hover or focus me
    </button>
    <br>
    <br>
    <p class="glitch-target__paragraph">This text should now glitch out</p>
  </div>
</section>

<section class="cursor-target-section library-section">
  <h2 class="h5">[ Cursor Target - Util ]</h2>
  <p>
    If using a mouse cursor, you can set up a trigger and target to spice things
    up! The class <code>cursor-trigger</code> goes on the trigger element. It also comes
    with a few data attributes such as:
    <ul class="classic-list">
      <li><code>data-cursor-target</code> â€” which takes the class of the target element</li>
      <li><code>data-cursor-class</code> â€” which lets use set up a modifier class to the mouse cursor</li>
    </ul>
  </p>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__dot"
    data-cursor-class="dot-hover-active"
  >
    Hover dot
  </p>
  <div class="cursor-target__dot">â€¢</div>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__icon"
    data-cursor-class="star-icon"
    data-cursor-event="mousemove"
  >
    Hover star (inline with magnet effect)
    <span 
      class="cursor-target__icon magnet magnet-strong" 
      style="
        display: inline-flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        width: 36px;
        height: 36px;
      "
    >
      â˜…
    </span>
  </p>

    <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__dot"
    data-cursor-class="dot-hover-active"
  >
    Hover the first dot... woah. See note below for fix.
  </p>
  <div class="cursor-target__dot">â€¢ &nbsp;&nbsp;(won't target)</div>

  <p>Note: If you have multiple elements (or components) with shared trigger/target names, but want each instance to be unique from one another you'll need to wrap each instance in a container with the class <code>glitch-pair</code>. Otherwise only the first instance will work properly.</p>
  <p
    class="cursor-pair"
    data-cursor-target="cursor-target__square"
  >
  <span class="cursor-trigger">Hover square</span>
  &nbsp;&nbsp;
  <span class="cursor-target__square">â—¼ï¸Ž</span>
  </p>
  <p
    class="cursor-pair"
    data-cursor-target="cursor-target__square"
  >
  <span class="cursor-trigger">Hover square</span>
  &nbsp;&nbsp;
  <span class="cursor-target__square">â—¼ï¸Ž</span>
  </p>
</section>

<section class="tabs-section">
  <h2 class="h5">[ Tabs - Component ]</h2>

  <!-- prettier-ignore -->
  {% set tab_list = library.tabs.tabs %}
  {% include "./_includes/library/tabs.njk" %}
</section>

<div class="carousel-hero-library">
  <h2 class="h5">[ Carousel 'Hero' - Section-component ]</h2>
  <br>
  <p>Also adding the utility class <code>grid-fade</code> along with itâ€™s associated configs:</p>
  <br>
  <ul class="classic-list">
    <li><code>data-grid-fade</code> which takes <code>in-out</code> or <code>in</code> (default) depending on scroll preference.</li>
    <li><code>data-grid-tile-size</code> which takes either: <code>small</code>, <code>medium</code> (default), or <code>large</code>.</li>
    <li><code>data-grid-fade-random</code> which takes either: <code>true</code> (default) or <code>false</code>.</li>
  </ul>
</div>
<div 
  class="grid-fade"
  data-grid-fade="in-out"
  data-grid-tile-size="small"
  data-grid-fade-random="true"
>
  <!-- prettier-ignore -->
  {% set carousel_hero_autoplay = library.carousel_hero.autoplay %}
  {% set carousel_hero_slides = library.carousel_hero.slides %}
  {% include "./_includes/library/carousel-hero.njk" %}
</div>

<section class="carousel-swiper-section">
  <h2 class="h5">[ Carousel 'Swiper' - Component ]</h2>

  <!-- prettier-ignore -->
  {% set carousel_autoplay = library.carousel_swiper.autoplay %}
  {% set carousel_controls = library.carousel_swiper.controls %}
  {% set carousel_slides = library.carousel_swiper.slides %}
  {% set carousel_pagination = library.carousel_swiper.pagination %}
  {% include './_includes/library/carousel-swiper.njk' %}
</section>

<div class="library-section" style="margin: var(--body-padding-double) 0 48px var(--body-padding);">
  <h2 class="h5">[ Marquee - Component ]</h2>
  <p>Comes with a handful of configs:</p>
  <ul class="classic-list">
    <li><code>text</code> Accepts a string value and will display the message passed in. (Not recommneded to use with <code>imgs</code>)</li>
    <li><code>imgs</code> Accepts an array of images (taking src and alt props). (Not recommneded to use with <code>text</code>)</li>
    <li><code>scrub</code> A boolean that toggles whether the velocity should be controlled by the scroll position.</li>
    <li><code>count</code> The number of marquee elements stacked on top of one another.</li>
  </ul>
</div>
<!-- prettier-ignore -->
{% set marquee = library.marquee.marquee %}
{% include './_includes/library/marquee.njk' %}

<section class="accordion-section">
  <h2 class="h5" style="margin-bottom: 48px">[ Accordion - Component ]</h2>
  <!-- prettier-ignore -->
  {% set accordion_list = library.accordion.accordion_data %}
  {% include './_includes/library/accordion.njk' %}
</section>

<section class="fill-text-section">
  <h2 class="h5 fill-text">[ Fill Text - Util ]</h2>
  <br>
  <br>
  <h3 class="h6 fill-text slow-fill">This is a random slow title.....</h3>  
  <br>
  <br>
  <p class="fill-text quick-fill">
    Use the 'fill-text' utility class to get this effect. Note: this relies on a simple utlity class.
    Modify the speed with 'slow-fill' or 'quick-fill'. Lorem ipsum dolor sit
    amet consectetur adipisicing elit. Perferendis earum maxime ab, accusantium
    rem ex assumenda doloribus officia corrupti deserunt repellendus, rerum nisi
    beatae debitis dolore eligendi accusamus dolor voluptate facilis quos odit
    deleniti pariatur a. Consequuntur qui laudantium esse rem commodi odio
    assumenda, architecto officiis consectetur quas, earum vel. Harum incidunt
    eligendi alias commodi expedita enim perspiciatis sequi nemo, numquam
    architecto ipsam? Perspiciatis eaque delectus fugit tempora iste iusto
    aspernatur asperiores, atque esse corporis, id mollitia labore eos
    doloremque consequatur! Qui officia natus voluptates cumque eum fugit aut
    iure amet quam, earum libero, rerum obcaecati beatae totam, quaerat facere
    harum! Fugiat neque laborum aspernatur ut. Minima soluta, harum quisquam
    repellat vitae eveniet doloribus omnis excepturi? A officia eius
    perferendis.
  </p>
  <br>
  <br>
  <ul class="classic-list">
    <li>Requires the util class <code>fill-text</code></li>
    <li>Speed up with additional modifier class <code>quick-fill</code></li>
    <li>Slow down with additional modifier class <code>slow-fill</code></li>
  </ul>
</section>

<!-- prettier-ignore -->
{% set hs_title = library.horizontal_scroll.title %} 
{% set hs_desc = library.horizontal_scroll.desc %}
{% set hs_message = library.horizontal_scroll.message %}
{% set hs_imgs = library.horizontal_scroll.imgs %}
{% set hs_img_parallax = library.horizontal_scroll.img_parallax %}
{% include './_includes/library/horizontal-scroll.njk' %}

<!-- prettier-ignore  -->
{% set panel_nav = library.stack_scroll.panel_nav %}
{% set panel_copy = library.stack_scroll.panel_copy %} 
{% set panel_data = library.stack_scroll.panels %}
{% set panel_configs = library.stack_scroll.panel_configs %}
{% include './_includes/library/stack-scroll.njk' %}

<section class="video-section library-section">
  <h2 class="h5">[ Video Overlay - Util ]</h2>
  <p>
    This can be a traditional cta or can simply wrap an element i.e. an image.
  </p>

  <!-- prettier-ignore -->
  <button
    class="cta-1 video-toggle tab-element-page"
    data-src="{{ library.video_overlay.video_src }}"
    aria-label="Open video overlay for {{ item.title }}"
    aria-controls="video-overlay"
  >
    Toggle video overlay
  </button>
</section>

<section class="form-section">
  <h2 class="h5">[ Form Feedback - Component ]</h2>

  <!-- prettier-ignore -->
  {% set form_data = library.form_contact.form_data %}
  {% include "./_includes/library/form-feedback.njk" %}
</section>

<section class="form-section">
  <h2 class="h5">[ Form Redirect - Component ]</h2>

  <!-- prettier-ignore -->
  {% set form_data = library.form_redirect.form_data %}
  {% include "./_includes/library/form-redirect.njk" %}
</section>
