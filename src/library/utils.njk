---
layout: app
path: library/utils
# Non public facing DELETE ME CHANGE ME
---

<!-- prettier-ignore -->
{% set hero_simple = ({
  title: 'Utility Classes',
  desc: 'Powerful and easy to use utility classes to achieve a wide range of effects.'
 }) %}
{% include '../_includes/library/sections/hero-simple.njk' %}

<section class="cursor-target-section library-section">
  <h2 class="h5">[ Cursor Target - Util ]</h2>
  <strong>Requires custom mouse cursor*</strong>
  <p class="max-width-text">
    If using a mouse cursor, you can set up a <strong>trigger</strong> and
    <strong>target</strong> to spice things up! The class
    <code>cursor-trigger</code> goes on the trigger element along with the
    required data attribute <code>data-cursor-target</code>.
  </p>

  <ul class="classic-list">
    <li>
      <code>data-cursor-target</code> A string that matches the unique class of
      the target element.
    </li>
    <li>
      <code>data-cursor-class</code> A string that adds a custom modifier class
      to the mouse cursor.
    </li>
  </ul>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__dot"
    data-cursor-class="dot-hover-active"
  >
    Hover dot
  </p>
  <div class="cursor-target__dot">•</div>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__icon"
    data-cursor-class="star-icon"
    data-cursor-event="mousemove"
  >
    Hover star (inline with magnet effect)
    <span
      class="cursor-target__icon magnet magnet-strong"
      style="
        display: inline-flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        width: 36px;
        height: 36px;
      "
    >
      ★
    </span>
  </p>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__dot"
    data-cursor-class="dot-hover-active"
  >
    Hover the first dot... woah. See note below for fix.
  </p>
  <div class="cursor-target__dot">• &nbsp;&nbsp;(won't target)</div>

  <p>
    Note: If you have multiple elements (or components) with shared
    trigger/target names, but want each instance to be unique from one another
    you'll need to wrap each instance in a container with the class
    <code>cursor-pair</code> Otherwise only the first instance will work
    properly.
  </p>
  <p class="cursor-pair" data-cursor-target="cursor-target__square">
    <span class="cursor-trigger">Hover square</span>
    &nbsp;&nbsp;
    <span class="cursor-target__square">◼︎</span>
  </p>
  <p class="cursor-pair" data-cursor-target="cursor-target__square">
    <span class="cursor-trigger">Hover square</span>
    &nbsp;&nbsp;
    <span class="cursor-target__square">◼︎</span>
  </p>
</section>

<section class="glitch-text-section library-section">
  <h2 class="h5">
    <span class="glitch-scroll">[ Glitch Text&nbsp-&nbsp</span>
    <span class="glitch-cycle" data-glitch-cycle-words="Util, Class">
      Util </span
    >&nbsp;]
  </h2>
  <p>
    Utilize GSAP's <code>text-scrambler</code> effect! While not required, there
    is a class: <code>glitch-text</code>, that clips the max width to the
    content width to prevent overshooting. This could be used for other
    variable/util needs.
  </p>

  <h3 class="h6">Glitch Cycle</h3>
  <p>
    The glitch cycle uses the <code>glitch-cycle</code> class along with
    multiple <code>data</code> attributes to configure.
  </p>
  <ul class="classic-list">
    <li>
      <code
        >data-glitch-cycle-words="creative, responsive, accessible, innovative,
        engaging"</code
      >
    </li>
    <li>
      <code
        >data-glitch-cycle-colors="#e48c66, #007bff, var(--color-font--primary),
        #c0c0c0, #007bff"</code
      >
    </li>
    <li><code>data-glitch-cycle-interval="2000"</code></li>
  </ul>
  <h6>
    Sample:
    <span
      class="glitch-cycle"
      data-glitch-cycle-words="creative, responsive, accessible, innovative, engaging"
      data-glitch-cycle-colors="#e48c66, #007bff, var(--color-font--primary), #c0c0c0, #007bff"
      data-glitch-cycle-interval="2000"
    >
      Creative
    </span>
  </h6>

  <br />

  <h3 class="h6">Glitch Scroll</h3>
  <p>
    The class <code>glitch-scroll</code> will scramble the text when the element
    comes into view. Use the following data attributes to customize the
    experience:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-glitch-chars</code> String value determining scramle characters
      shown. Default is <code>"upperAndLowerCase"</code>
    </li>
    <li>
      <code>data-glitch-reveal-delay</code> Number, the delay of the scroll
      animation. Default is <code>0.05</code>
    </li>
    <li>
      <code>data-glitch-duration</code> Number, the duration of the glitch
      animation. Default is <code>0.75</code>
    </li>
    <li>
      <code>data-glitch-once</code> An optional boolean that will toggle the
      effect to occur only the first time the element scrolls into view. Default
      is <code>false</code>
    </li>
    <li>
      <code>data-glitch-trigger</code> String, the class or id (don't forget .
      or #) of the element that triggers the effect. Default is the glitch
      element itself.
    </li>
    <li>
      <code>data-glitch-start</code> String, the parameters for scrollTrigger.
      Default is <code>"top 98%"</code>
    </li>
    <li>
      <code>data-glitch-end</code> String, the parameters for scrollTrigger.
      Default is <code>"bottom 2%"</code>
    </li>
    <li>
      <code>data-glitch-markers</code> Optional boolean, markers to help
      build/debug. Default is
      <code>false</code>
    </li>
  </ul>
  <p class="glitch-scroll">
    This will glitch out as many times as you scroll into view. Default
    behavior.
  </p>
  <p class="glitch-scroll" data-glitch-once="true">
    This will only glitch out once.
  </p>
  <p
    class="glitch-text glitch-scroll"
    data-glitch-trigger=".glitch-trigger-subtitle"
    data-glitch-end="bottom center"
  >
    This will glitch when the subtitle "Glitch Trigger/Target" comes into view.
    Great for pinned sections, just don't forget to add the '.' with the
    classname!
  </p>

  <br />

  <h3 class="h6">Glitch Hover</h3>
  <p>
    The class <code>glitch-hover</code> causes the text content (works with
    nested elements) to scramble on hover or focus. Comes with the following
    configs:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-glitch-new-text</code> A string that changes the glitch text to
      a new message. Defaults to <code>null</code>
    </li>
    <li>
      <code>data-glitch-out</code> A boolean that toggles if the animation
      should also occur on mouseleave and blur. Defaults to <code>false</code>
    </li>
  </ul>
  <!-- prettier-ignore -->
  {% set btn = ({
    text: 'Hover Me',
    type: 'solid',
    class: 'glitch-hover'
   }) %}
  {% include "../_includes/components/btn.njk" %}
  
  {% set btn = ({
    text: 'Glitch Out',
    type: 'outline',
    class: 'glitch-hover',
    attributes: 'data-glitch-out=true'
   }) %}
  {% include "../_includes/components/btn.njk" %}
  
  {% set btn = ({
    text: 'Change Text',
    type: 'icon-end',
    class: 'glitch-hover',
    attributes: 'data-glitch-new-text="Updated Text"'
   }) %}
  {% include "../_includes/components/btn.njk" %}

  <br />

  <h3 class="h6 glitch-trigger-subtitle">Glitch Trigger/Target</h3>
  <p>
    The class <code>glitch-trigger</code> will act as the hover/focus point to
    trigger the glitch elsewhere. This requires the
    <code>data-glitch-target="glitch-target__arbitrary"</code> which takes a
    unique value that matches the class of the target. The target will then have
    the class that matches <code>class="glitch-target__arbitrary"</code>
  </p>

  <div class="glitch-pair">
    <p>
      This one can get tricky with scaling e.g. using target glitch on a
      component since there would be multiple triggers and targets with the same
      value. A workaround is using a parent wrapper with the class
      <code>glitch-pair</code> IF the elements are siblings in the markup rather
      than nested (such as cta-2).
    </p>
    <br />
    <br />
    <button
      class="cta-1 glitch-trigger tab-element-page"
      data-glitch-target="glitch-target__paragraph"
    >
      Hover or focus me
    </button>
    <br />
    <br />
    <p class="glitch-target__paragraph">This text should now glitch out</p>
  </div>
</section>

<section class="gradient-border-section library-section">
  <h2 class="h5">[ Gradient border - Util ]</h2>
  <p>
    Gradient borders. Simple but confusing. Saw Okta doing this and wanted to
    see what it was about.
  </p>

  <div class="gradient-border">
    <h3 class="h6">Gradient border</h3>
    <p>
      Wow so cool! Lorem ipsum dolor sit, amet consectetur adipisicing elit.
      Molestiae commodi veritatis totam harum accusamus quia sint aliquam quod
      non, earum reiciendis, minus consequuntur dolores.
    </p>
  </div>
</section>

<section class="gsap-animate-section library-section">
  <h2 class="gsap-animate-section__title gsap-animate h5">
    [ GSAP animate - Util ]
  </h2>
  <strong class="gsap-animate-section__subtitle gsap-animate">
    <sup>*</sup>Requires custom code/css to define the animation
  </strong>
  <p class="gsap-animate-section__desc gsap-animate">
    With the utility class <code>gsap-animate</code>, you'll unlock the powers
    of GSAP's <code>scrollTrigger</code> plugin. When the element comes into
    view, you'll be able to apply additional styles with the temporary
    <code>gsap-animated</code> class.
  </p>

  <ul class="classic-list">
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-once</code> Boolean, to toggle the animation only the
      first time. Default is <code>false</code>.
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-trigger</code> String, the class or id (don't forget . or
      #) of the element that triggers the effect. Default is the gsap-animate
      element itself.
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-start</code> String, the parameters for scrollTrigger.
      Default is <code>"top 98%"</code>
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-end</code> String, the parameters for scrollTrigger.
      Default is <code>"bottom 2%"</code>
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-markers</code> Boolean, markers to help build/debug.
      Default is
      <code>false</code>
    </li>
  </ul>
</section>

<section class="tabs-section library-section">
  <h2 class="h5">[ Tabs - Util ]</h2>
  <strong>Upcoming!</strong>
  <p>
    Intended for dynamic markup or custom components. Basically a plane that
    changes depending on the active tab.
  </p>
</section>

<!-- Text animations -->
<section class="text-fade-section library-section">
  <h2 class="h5 text-fade">[ Text Fade - Util ]</h2>
  <p class="text-fade" data-fade-duration="0.5">
    This uses GSAP's <strong>ScrollTrigger</strong> and
    <strong>SplitText</strong> plugins to fade in either words or characters.
  </p>
  <p class="text-fade" data-fade-type="words" data-fade-duration="0.5">
    This paragraph will animate each word rather than each character. Lorem
    ipsum dolor sit amet consectetur adipisicing elit. Error iste corrupti
    tempora aspernatur, consequatur blanditiis, repellat, quibusdam perferendis
    sequi dignissimos dolores? Magni, nisi quae.
  </p>
  <p
    class="text-fade"
    data-fade-type="chars"
    data-fade-once="true"
    data-fade-style="linear"
    data-fade-duration="2"
  >
    This text should only fade in the <strong>very first time!</strong> The
    letter split should also take a bit longer than expected (2s), making use of
    the data-fill-duration attribute.
  </p>
  <p
    class="text-fade"
    data-fade-style="linear"
    data-fade-scrub="true"
    data-fade-end="bottom 60%"
  >
    This text should scrub in a linear animation.
  </p>
  <br />
  <p class="text-fade">
    You can use the <code class="gsap-animate">text-fade</code> utility class
    with the following attributes:
  </p>
  <ul class="classic-list">
    <li class="text-fade">
      <code class="gsap-animate">data-fade-type</code> A string that takes in
      <code class="gsap-animate">words | chars</code>. Defaults to
      <code class="gsap-animate">words</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-style</code> A string that takes in
      <code class="gsap-animate">linear | random</code>. Defaults to
      <code class="gsap-animate">random</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-duration</code> A number to control
      the animation duration. Defaults to <code class="gsap-animate">0.25</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-once</code> A boolean to fire to
      animation only the first time it comes into view. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-scrub</code> A boolean to scrub
      through the animation rather than playing it. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-start</code> A string to set the
      start animation. Defaults to
      <code class="gsap-animate">"top 98%"</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-end</code> A string to set the end
      animation. Defaults to
      <code class="gsap-animate">"bottom 2%"</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-markers</code> A boolean to toggle
      visual debugging markers.
      <code class="gsap-animate">false</code>
    </li>
  </ul>
</section>

<section class="text-fill-section">
  <h2 class="h5 text-fill">[ Text Fill - Util ]</h2>
  <br />
  <br />
  <strong class="text-fill" data-fill-scrub="false">
    Note: Both flexbox (element or parent) and position absolute can affect the
    line by line animation <sup>*</sup>
  </strong>
  <br />
  <br />
  <h3 class="h6 text-fill" data-fill-end="bottom 40%">
    Slow it down with 'bottom 20%'.....
  </h3>
  <br />
  <br />
  <p class="text-fill" data-fill-end="bottom 40%">
    Use the <strong>'text-fill'</strong> utility class to get started with this
    effect. <strong>Note</strong> there are some caveats such as flexbox parent
    containers and different position absolute. Modify the speed with
    <strong>'data-fill-end'</strong> This comes with aditional configs, one of
    which detaches scrub and allows you to fire the animation once. Lorem ipsum
    dolor, sit amet consectetur adipisicing elit. Non laudantium ad tempora
    facilis tempore, enim earum molestiae iusto doloremque incidunt voluptatum,
    dolorum, obcaecati sint officia cum quia. Itaque et, ad accusantium a
    impedit, consectetur, magni debitis tenetur ab odio laborum!
  </p>
  <br />
  <br />
  <p
    class="text-fill"
    data-fill-start="top 80%"
    data-fill-end="bottom 80%"
    data-fill-scrub="false"
    data-fill-once="true"
    data-fill-duration="5"
    data-fill-markers="false"
  >
    This sample will only fire once with
    <strong class="text-underline">data-fill-once="true"</strong>. It also
    starts a little bit later with
    <strong class="text-underline">data-fill-start="top 80%"</strong>. The
    duration can also be altered with
    <strong class="text-underline">data-fill-duration="NUMBER"</strong> Lorem
    ipsum dolor, sit amet consectetur adipisicing elit. Non laudantium ad
    tempora facilis tempore, enim earum molestiae iusto doloremque incidunt
    voluptatum, dolorum, obcaecati sint officia cum quia. Itaque et, ad
    accusantium a impedit, consectetur, magni debitis tenetur ab odio laborum!
  </p>
  <br />
  <br />
  <ul class="classic-list">
    <li>Requires the util class <code>text-fill</code></li>
    <li>
      <code>data-fill-start</code> An optional string that takes two percentage
      values. The values represent the target element and the viewport, where 0%
      is the top while 100% is the bottom. Default is
      <code>"0% 90%"</code>
    </li>
    <li>
      <code>data-fill-end</code> An optional string that takes two percentage
      values. The values represent the target element and the viewport, where 0%
      is the top while 100% is the bottom. Default is
      <code>"100% 60%"</code>
    </li>
    <li>
      <code>data-fill-scrub</code> boolean, to toggle scrubbing. Defaults to
      <code>true</code>
    </li>
    <li>
      <code>data-fill-duration</code> A number that represents the number of
      seconds to complete the animation. <strong>Requires</strong>
      <code>data-fill-scrub="false"</code>. Defaults to
      <code>1</code>
    </li>
    <li>
      <code>data-fill-once</code> boolean, to toggle multiple animations when
      scrolling to the element. <strong>Requires</strong>
      <code>data-fill-scrub="false"</code>. Defaults to <code>false</code>
    </li>
    <li>
      <code>data-fill-markers</code> boolean, to toggle visual debugging
      markers. Defaults to <code>false</code>
    </li>
  </ul>
</section>

<section class="text-scale-section library-section">
  <h2 class="h5 text-scale">[ Text scale - Util ]</h2>
  <p class="text-scale" data-scale-duration="0.5">
    This uses GSAP's <strong>ScrollTrigger</strong> and
    <strong>SplitText</strong> plugins to scale in either words or characters.
    This is position aware, meaning that the transform origin will determine the
    words placement in the sentence.
  </p>
  <p
    class="text-scale"
    data-scale-type="words"
    data-scale-duration="0.15"
    data-scale-scrub="true"
    data-scale-end="bottom 75%"
    style="max-width: 750px"
  >
    This paragraph will animate each word rather than each character. Lorem
    ipsum dolor sit amet consectetur adipisicing elit. Error iste corrupti
    tempora aspernatur, consequatur blanditiis, repellat, quibusdam perferendis
    sequi dignissimos dolores? Magni, nisi quae.
  </p>
  <p
    class="text-scale"
    data-scale-type="chars"
    data-scale-once="true"
    data-scale-style="linear"
    data-scale-duration="2"
  >
    This text should only scale in the <strong>very first time!</strong> The
    letter split should also take a bit longer than expected (2s), making use of
    the data-fill-duration attribute.
  </p>
  <p
    class="text-scale"
    data-scale-style="linear"
    data-scale-scrub="true"
    data-scale-end="bottom 60%"
  >
    This text should scrub in a linear animation.
  </p>
  <br />
  <p class="text-scale">
    You can use the <code class="gsap-animate">text-scale</code> utility class
    with the following attributes:
  </p>
  <ul class="classic-list">
    <li class="text-scale">
      <code class="gsap-animate">data-scale-type</code> A string that takes in
      <code class="gsap-animate">words | chars</code>. Defaults to
      <code class="gsap-animate">chars</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-style</code> A string that takes in
      <code class="gsap-animate">linear | random</code>. Defaults to
      <code class="gsap-animate">random</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-duration</code> A number to control
      the animation duration. Defaults to <code class="gsap-animate">0.25</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-once</code> A boolean to fire to
      animation only the first time it comes into view. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-scrub</code> A boolean to scrub
      through the animation rather than playing it. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-start</code> A string to set the
      start animation. Defaults to
      <code class="gsap-animate">"top 98%"</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-end</code> A string to set the end
      animation. Defaults to
      <code class="gsap-animate">"bottom 2%"</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-markers</code> A boolean to toggle
      visual debugging markers.
      <code class="gsap-animate">false</code>
    </li>
  </ul>
</section>
<!-- Text animations -->

<section class="tilt-cards library-section cursor-hide">
  <h2 class="h5">[ Tilt - Util ]</h2>

  <strong>Requires additional script tag*</strong>
  <p>
    A subtle 3d effect for desktop users that uses the
    <a
      class="classic-link tab-element-page"
      href="https://micku7zu.github.io/vanilla-tilt.js/"
      target="_blank"
      >vanilla tilt js library/cdn</a
    >. Throw the <code>data-tilt</code> attribute on any element to activate.
    Comes with the following configs:
  </p>
  <ul class="classic-list tilt-target__card">
    <li>
      <code>data-tilt-reverse</code> boolean, Reverse the tilt direction.
      Default is
      <code>false</code>
    </li>
    <li>
      <code>data-tilt-max</code> number, max tilt rotation. Default is
      <code>35</code>
    </li>
    <li>
      <code>data-tilt-startX</code> number, resting tilt along x-axis. Default
      is
      <code>0</code>
    </li>
    <li>
      <code>data-tilt-startY</code> number, resting tilt along y-axis. Default
      is
      <code>0</code>
    </li>
    <li>
      <code>data-tilt-perspective</code> number, lower value is more dramatic.
      Default is
      <code>1000</code>
    </li>
    <li>
      <code>data-tilt-scale</code> number scale on hover (subtle pop effect).
      Default is
      <code>1</code>
    </li>
    <li>
      <code>data-tilt-speed</code> number, speed of enter/exit transition.
      Default is
      <code>300</code>
    </li>
    <li>
      <code>data-tilt-transition</code> boolean, set a transition on enter/exit.
      Default is <code>true</code>
    </li>
    <li>
      <code>data-tilt-axis</code> string, limit to only one axis. Takes
      <code>x | y | null</code> Default is <code>null</code>
    </li>
    <li>
      <code>data-tilt-reset</code> boolean, toggle tilt reset on exit. Default
      is
      <code>true</code>
    </li>
    <li>
      <code>data-tilt-easing</code> string, easing value on enter/exit. Accepts
      cubic-bezier curves. Default is <code>cubic-bezier(.03,.98,.52,.99)</code>
    </li>
    <li>
      <code>data-tilt-glare</code> boolean, toggle glare effect. Default is
      <code>false</code>
    </li>
    <li>
      <code>data-tilt-max-glare</code> number between 0 and 1 for opacity.
      Default is
      <code>1</code>
    </li>
    <li>
      <code>data-tilt-mouse-event-element</code> string, css class or link to
      HTML elem that triggers tilt effect. Requires '.' on class. Default is
      <code>null</code>
    </li>
    <li>
      <code>data-tilt-gyroscope</code> boolean, to toggle on orientation
      devices. Default is <code>true</code>
    </li>
  </ul>
  <div class="tilt-card-group">
    <div class="tilt-card" data-tilt>
      <h3 class="h6">Default</h3>
      <br />
      <p>No extra attributes other than <code>data-tilt</code></p>
      <!-- prettier-ignore -->
      {% set cta_1 = { 
        text: 'Learn more', 
        url: 'https://micku7zu.github.io/vanilla-tilt.js/' } 
      %} 
      {% include "../_includes/components/cta-group.njk" %}
    </div>
    <div
      class="tilt-card tilt-card--3d"
      data-tilt
      data-tilt-reverse="true"
      data-tilt-max="10"
      data-tilt-startX="0"
      data-tilt-startY="0"
      data-tilt-perspective="2400"
      data-tilt-speed="750"
      data-tilt-reset="true"
      data-tilt-glare="true"
      data-tilt-max-glare="0.125"
    >
      <h3 class="h6">Reversed</h3>
      <br />
      <p>
        This sublte reversed tilt effect not only includes a glare, but also has
        a different transition speed.
      </p>
      <br />
      <p>It also sets up the 3d/parallax effect:</p>
      <ol class="classic-list">
        <li>
          Add <code>transform-style: preserve-3d</code> to the tilt element.
        </li>
        <li>
          Add <code>transform: perspective(1000px);</code> to the tilt element.
        </li>
        <li>
          Add <code>transform: translateZ(20px);</code> to the inner element(s)
          that you want to pop.
        </li>
      </ol>
      {% set cta_1 = { text: 'Get started', url: 'https://axyscreative.com' } %}
      {% set cta_2 = { text: 'Visit FAQ', url: 'https://axyscreative.com' } %}
      {% include "../_includes/components/cta-group.njk" %}
    </div>
    <div
      class="tilt-card"
      data-tilt
      data-tilt-reverse="false"
      data-tilt-max="20"
      data-tilt-startX="0"
      data-tilt-startY="0"
      data-tilt-perspective="750"
      data-tilt-speed="100"
      data-tilt-reset="false"
      data-tilt-glare="true"
    >
      <h3 class="h6">Dramatic</h3>
      <br />
      <p>A bit stronger with the max-glare and the tilt doesn't reset.</p>
      {% set cta_1 = { text: 'Get started', url: 'https://axyscreative.com' } %}
      {% set cta_2 = { text: 'Visit FAQ', url: 'https://axyscreative.com' } %}
      {% include "../_includes/components/cta-group.njk" %}
    </div>
  </div>
</section>

<section class="tooltip-section library-section cursor-hide">
  <h2 class="h5">[ Tooltip - Util or Component ]</h2>
  <p>
    A tooltip can be added in two ways: as a utility class or a component. Each
    method comes with different pros and cons.
  </p>
  <br />

  <h3 class="h6">Tooltip Util (follows mouse)</h3>
  <strong>
    Note: requires mouse-cursor.njk component.
    <br />
    Also, the tooltip doesn't display while the user is scrolling. With Lenis
    this may cause a delay to see the tooltip.
  </strong>
  <p>
    The tooltip can also be tagged on any element using the class
    <code>tooltip-util</code> The configs are as follows:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-tooltip-message</code> A string, this is the value of the
      message for the tooltip (perhaps see if this can take html).
    </li>
    <li>
      <code>data-tooltip-min-width</code> A number, this applies a minimum width
      to the message bubble.
    </li>
  </ul>

  <p>
    Tooltip util
    <span
      class="tooltip-util tab-element-page"
      data-tooltip-message="Recommended to use with keyboard accessible elements. Check resources to see if buttons are appropriate for this."
      data-tooltip-min-width="212"
      role="button"
      tabindex="0"
    >
      used with inline text
    </span>
    . You’ll notice that the text bubble is
    <span
      class="tooltip-util tab-element-page"
      data-tooltip-message="This will help make sure the text bubble/message is in view. Pretty sweet!"
      data-tooltip-min-width="250"
      role="button"
      tabindex="0"
    >
      directionally aware
    </span>
    and will reposition based on the mouse position in the viewport.
  </p>
  <img
    class="tooltip-util icon-md tab-element-page"
    data-tooltip-message="What happens when you have a really long description? Does it mess things up pretty badly or does it still work? I’m curious how this will turn out."
    data-tooltip-min-width="250"
    src="/static/img/library/icon-google-info-circle.svg"
    alt=""
    role="button"
    tabindex="0"
    eleventy:ignore
  />

  <br aria-hidden="true" />
  <br aria-hidden="true" />

  <h3 class="h6">Tooltip Component (fixed)</h3>
  <p>
    The component variation <code>tooltip.njk</code> comes with the following
    config options:
  </p>
  <ul class="classic-list">
    <li>
      <code>message</code> a string, this is the text within the message bubble.
    </li>
    <li>
      <code>text</code> an optional string that can be used as the tooltip
      trigger (vs an icon).
    </li>
    <li>
      <code>icon</code> an optional string used to override the default icon
      image. This is the path to the image source.
    </li>
    <li>
      <code>size</code> a string of either <code>sm | md | lg</code> to adjust
      the tooltip message size. Defaults is <code>md</code>
    </li>
    <li>
      <code>place</code> a string of either
      <code>top | right | bottom | left</code> to position the tooltip bubble.
      Default is <code>top</code>
    </li>
  </ul>

  <!-- prettier-ignore -->
  {% set tooltip_data = library.tooltip.tooltip_1 %} 
  {% include "../_includes/library/components/tooltip.njk" %} 

  {% set tooltip_data = library.tooltip.tooltip_2 %} 
  {% include "../_includes/library/components/tooltip.njk" %}

  <div>
    <p>
      Does this work inline? Yes,
      <!-- prettier-ignore -->
      {% set tooltip_data = library.tooltip.tooltip_3 %}
      {% include "../_includes/library/components/tooltip.njk" %} 
      then some text afterward.
    </p>
  </div>
</section>

<section class="typing-section library-section">
  <h2 class="h5">
    <span class="typing-scroll" data-typing-cursor="none"
      >[ Typing Text&nbsp;-&nbsp;</span
    >
    <span
      class="typing-cycle"
      data-typing-cycle-words="Util, Class, Block"
      data-typing-delay="800"
      data-typing-on-scroll="true"
    >
      Util
    </span>
    &nbsp;]
  </h2>

  <h3 class="h6">Typing Cycle</h3>
  <p>
    The typing cycle effect mimics human typing in an endless loop. It uses the
    <code>typing-cycle</code> class along with multiple
    <code>data</code> attributes to configure.
  </p>
  <ul class="classic-list">
    <li><code>data-typing-cycle-words</code> An array of strings.</li>
    <li>
      <code>data-typing-cycle-colors</code> An array of strings. Takes any valid
      css color value.
    </li>
    <li>
      <code>data-typing-speed-in</code> A number (in ms) that controls the
      typing speed. Default is <code>120</code>
    </li>
    <li>
      <code>data-typing-speed-out</code> A number (in ms) that controls the
      deleting speed. Default is <code>50</code>
    </li>
    <li>
      <code>data-typing-cycle-interval</code> A number (in ms) that controls the
      interval between when the word finishes typing & when the word starts
      deleting. Default is <code>2000</code>
    </li>
    <li>
      <code>data-typing-delay</code> Optional number (in ms) representing the
      initial delay of the animation. Default is <code>0</code>
    </li>
    <li>
      <code>data-typing-cursor</code> A string of either
      <code>caret | underscore | none</code> to alter the text cursor. Defaults
      to <code>caret</code>
    </li>
    <li>
      <code>data-typing-on-scroll</code> Optional boolean, to start the cycle
      when the element scrolls into view. Default is <code>false</code>
    </li>
  </ul>
  <h6>
    The human senses:
    <span
      class="typing-cycle"
      data-typing-cycle-words="touch, sight, sound, taste, smell"
      data-typing-cycle-colors="var(--color-brand--primary), forestgreen, #c0c0c0, crimson, slateblue"
      data-typing-speed-in="100"
      data-typing-speed-out="25"
      data-typing-cycle-interval="2000"
      data-typing-delay="1500"
      data-typing-cursor="underscore"
    ></span>
  </h6>
  <h6>
    The four seasons:
    <span
      class="typing-cycle"
      data-typing-cycle-words="Spring, Summer, Autumn, Winter"
      data-typing-speed-in="75"
      data-typing-speed-out="200"
      data-typing-cycle-interval="1250"
      data-typing-cursor="none"
    ></span>
  </h6>

  <br />

  <h3 class="h6">Typing Scroll</h3>
  <p>
    The class <code>typing-scroll</code> will trigger the typing animation when
    the element comes into view. Comes with the following configs:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-typing-once</code> A boolean to toggle if the animation should
      fire each time the element scrolls into view. Default is
      <code>false.</code>
    </li>
    <li>
      <code>data-typing-speed</code> The number (in ms), representing the typing
      speed. Default is <code>50</code>
    </li>
    <li>
      <code>data-typing-delay</code> Optional number (in ms), representing the
      initial delay of the animation. Default is <code>0</code>
    </li>
    <li>
      <code>data-typing-cursor</code> A string of either
      <code>caret | underscore | none</code> to alter the text cursor. Defaults
      to <code>caret</code>
    </li>
  </ul>

  <p class="typing-scroll">
    This will type out as many times as you scroll into view. Default behavior.
  </p>
  <p
    class="typing-scroll"
    data-typing-once="true"
    data-typing-speed="25"
    data-typing-delay="3200"
    data-typing-cursor="underscore"
  >
    This will only type out once, the very first time it comes into view. Also
    has a delay of 3200ms.
  </p>
</section>

<section class="video-bg-section library-section">
  <h2 class="h5">[ Video-bg - Util ]</h2>
  <p>
    With minimal setup, you can add a video background to any section, container
    or element using the <code>video-bg</code> class and including the
    <code>video-bg.njk</code> partial at the bottom of your wrapper.
  </p>
  <strong>Configs currently in progress*</strong>

  <br /><br /><br /><br />

  <div class="video-bg video-bg--sample-1 cursor-hide">
    <h3>Video Background</h3>
    <p class="max-width-text text-balance text-center">
      Minimal setup, maxiumum impact. Just add a class and tuck the component at
      the bottom, then watch the magic!
    </p>
    <!-- prettier-ignore -->
    {% set cta_1 = { text: 'Get started', url: 'https://axyscreative.com', new_tab: true } %}
    {% set cta_2 = { text: 'Visit FAQ', url: 'https://axyscreative.com#faq', new_tab: true } %}
    {% include "../_includes/components/cta-group.njk" %}

    {% set video_bg = ({
      src: 'https://www.dropbox.com/scl/fi/6sh06eo6b3x84qo823qcq/sample-video-1.mp4?rlkey=0v6dqkra2wk7de0rz849ufm7o&st=0705ulra&dl=0',
      id: 'video-bg-1'
    }) %}
    {% include "../_includes/library/components/video-bg.njk" %}
  </div>

  <div class="video-bg-group">
    <div class="video-bg video-bg--sample-2 cursor-hide">
      <h3 class="text-fill h6">2.0 Variant</h3>
      <p class="text-fill">Shadow: top</p>
      <p class="text-fill">Autoplay: false</p>

      <!-- prettier-ignore -->
      {% set video_bg = ({
        src: 'https://www.dropbox.com/scl/fi/x64lje5a8nm7fezjdallt/sample-video-3.mp4?rlkey=wsn6jcpn1t3f6qxpqn3n5zywx&st=43kgpnu2&dl=0',
        id: 'video-bg-2',
        autoplay: false,
        shadow: top,
        toggle: {
          class: 'magnet magnet-strong',
          placement: 'tr'
        }
      }) %}
      {% include "../_includes/library/components/video-bg.njk" %}
    </div>

    <div class="video-bg video-bg--sample-3 cursor-hide" data-tilt>
      <h3 class="glitch-scroll h4">Space</h3>
      <p class="typing-scroll" data-typing-cursor="underscore">
        Simply remarkable
      </p>

      <!-- prettier-ignore -->
      {% set video_bg = ({
        src: 'https://www.dropbox.com/scl/fi/lqhy0y29fdlv28f81stg2/sample-video-2.mp4?rlkey=nl7r3h0nj61dhqk2yjp30gase&st=sh670ugo&dl=0',
        id: 'video-bg-3',
        shadow: null,
        toggle: {
          class: 'magnet magnet-strong',
          placement: 'bl'
        }
      }) %}
      {% include "../_includes/library/components/video-bg.njk" %}
    </div>
  </div>
</section>

<section class="video-overlay-section library-section">
  <h2 class="h5">[ Video Overlay - Util ]</h2>
  <p>
    <strong>Note:</strong> While this is marked as a util due to the use of
    <code>video-toggle</code>, it requires the component
    <code>video-overlay.njk</code> somewhere in your app, along with the
    <code>video-overlay.js</code> file. Lastly, it requires the data source for
    the video file.
    <em>Generally dropbox can host these. Then just copy the share link.</em>
    The setup is simple:
  </p>
  <br />
  <ol class="classic-list">
    <li>
      Ensure you have the <code>video-overlay.njk</code> component and
      <code>video-overlay.js</code> file in your app.
    </li>
    <li>
      Add the utility class of <code>video-toggle</code> to your button/trigger.
    </li>
    <li>
      Provide the data- tag <code>data-vid-src</code> generally Dropbox can host
      these video files.
    </li>
    <li>That's it!</li>
  </ol>

  <!-- prettier-ignore -->
  {% set video_src = 'https://www.dropbox.com/scl/fi/6sh06eo6b3x84qo823qcq/sample-video-1.mp4?rlkey=0v6dqkra2wk7de0rz849ufm7o&st=0705ulra&dl=0' %}
  {% set btn = ({
    text: 'Toggle Video Overlay',
    type: 'solid',
    class: 'video-toggle glitch-hover',
    attributes: 'data-vid-src="'~video_src~'" aria-label="Toggle Video Overlay" aria-controls="video-overlay"'
   }) %}
  {% include "../_includes/components/btn.njk" %}

  <!-- prettier-ignore -->
  {% set video_src = 'https://www.dropbox.com/scl/fi/lqhy0y29fdlv28f81stg2/sample-video-2.mp4?rlkey=nl7r3h0nj61dhqk2yjp30gase&st=nyb73zpa&dl=0' %}
  {% set btn = ({
    text: 'Toggle Second Video',
    type: 'outline',
    class: 'video-toggle btn--bg-slide btn--split-text',
    attributes: 'data-vid-src="'~video_src~'" aria-label="Toggle Video Overlay" aria-controls="video-overlay" data-btn-slide="up" data-hover-alt'
   }) %}
  {% include "../_includes/components/btn.njk" %}
</section>
