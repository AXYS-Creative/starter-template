---
layout: app
path: library/utils
# Non public facing DELETE ME CHANGE ME
---

<!-- prettier-ignore -->
{% set hero_simple = ({
  title: 'Utility Classes',
  desc: 'Powerful and easy to use utility classes to achieve a wide range of effects.'
 }) %}
{% include '../_includes/library/sections/hero-simple.njk' %}

<section class="cursor-target-section library-section">
  <h2>[ Cursor Target - Util ]</h2>
  <strong>* Requires mouse-cursor.njk *</strong>
  <p class="max-width-text">
    If using a mouse cursor, you can set up a <strong>trigger</strong> and
    <strong>target</strong> to detach the cursor from following the mouse. The
    class <code>cursor-trigger</code> goes on the trigger element along with the
    required data attribute <code>data-cursor-target</code>.
  </p>

  <ul class="classic-list">
    <li>
      <code>data-cursor-target</code> A string that matches the unique class of
      the target element.
    </li>
    <li>
      <code>data-cursor-class</code> A string that adds a custom modifier class
      to the mouse cursor.
    </li>
  </ul>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__dot"
    data-cursor-class="dot-hover-active"
  >
    <strong>Hover me</strong> — move cursor to dot
  </p>
  <div class="cursor-target__dot">•</div>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__icon"
    data-cursor-class="star-icon"
    data-cursor-event="mousemove"
  >
    <strong>Hover me</strong> — move cursor to star (inline with magnet effect)
    <span
      class="cursor-target__icon magnet magnet-strong"
      style="
        display: inline-flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        width: 36px;
        height: 36px;
      "
    >
      ★
    </span>
  </p>

  <p
    class="cursor-trigger"
    data-cursor-target="cursor-target__dot"
    data-cursor-class="dot-hover-active"
  >
    <strong>Hover me</strong> — move cursor to... the first dot? See note below
    for fix.
  </p>
  <div class="cursor-target__dot">• &nbsp;&nbsp;(won't target)</div>

  <p class="max-width-text">
    <strong>Note:</strong>
    If you have multiple elements (or components) with shared trigger/target
    names, you’ll likely want each instance to be isolated from the next. The
    solution is to wrap each instance in a container with the class
    <code>cursor-pair</code> Otherwise only the first instance will work
    properly.
  </p>
  <p class="cursor-pair" data-cursor-target="cursor-target__square">
    <span class="cursor-trigger">
      <strong>Hover me</strong> — move cursor to the square
    </span>
    &nbsp;&nbsp;
    <span class="cursor-target__square">◼︎</span>
  </p>
  <p class="cursor-pair" data-cursor-target="cursor-target__square">
    <span class="cursor-trigger">
      <strong>Hover me</strong> — move cursor to the square
    </span>
    &nbsp;&nbsp;
    <span class="cursor-target__square">◼︎</span>
  </p>
</section>

<section class="cursor-content-section library-section">
  <h2>[ Cursor Content - Util ]</h2>
  <strong>* Requires mouse-cursor.njk *</strong>
  <p class="max-width-text">
    If using a mouse cursor, you can add content via the
    <code>cursor-content</code> class and supported attributes. Content inclues
    either a simple message or configurable svg-icon. You can also customize the
    cursor's general styles via a custom class with the
    <code>data-cursor-class</code> attribute.
  </p>

  <ul class="classic-list">
    <li>
      <code>data-cursor-message</code> A string, the message you want displayed
      within the cursor. Default to an empty string.
    </li>
    <li>
      <code>data-cursor-icon</code> A string, the path to the image file you
      would like to use. A default can be set in
      <code>mouse-cursor.njk</code> and you just leave the
      <code>data-cursor-icon</code> attribute blank.
    </li>
    <li>
      <code>data-cursor-class</code> A string that adds a custom modifier class
      to the mouse cursor.
    </li>
  </ul>

  <br /><br />
  <p class="max-width-text">
    The most basic sample using a sentence.
    <span class="cursor-content text-underline" data-cursor-icon>
      Hover here to see the icon.
    </span>
    This is the simplest form to include an icon with the mouse cursor. Just add
    the class <code>cursor-content</code> and use the default icon via
    <code>data-cursor-icon</code> which is provided in
    <strong>mouse-cursor.njk</strong>.
  </p>
  <div class="cursor-content-section__samples">
    <div
      class="cursor-content cursor-content-block-sample"
      data-cursor-icon="/static/img/library/icon-google-arrow-tr.svg"
      data-cursor-icon-size="md"
      data-cursor-class="cursor-content-1"
    >
      <p>"View project"</p>
    </div>

    <div
      class="cursor-content cursor-content-block-sample"
      data-cursor-icon="/static/img/library/icon-google-play.svg"
      data-cursor-class="cursor-content-2"
    >
      <p>"Play Video"</p>
    </div>

    <div
      class="cursor-content cursor-content-block-sample"
      data-cursor-message="Visit site"
      data-cursor-class="cursor-content-3"
    >
      <p>Hover me</p>
    </div>
  </div>
</section>

<section class="glitch-text-section library-section">
  <h2>
    [
    <span class="glitch-scroll glitch-text">Glitch Text</span>
    -
    <span
      class="glitch-cycle glitch-text"
      data-glitch-cycle-words="Util, Class"
    >
      Util </span
    >&nbsp;]
  </h2>
  <div>
    <p>
      Utilize GSAP's <code>text-scrambler</code> effect. While not required,
      it’s highly recommended to use a
    </p>
    <!-- prettier-ignore -->
    {% set tooltip = ({
      text: 'mono-spaced font',
      message: 'A font where every character is the same width.',
      size: 'sm',
      place_sm: 'bottom-right',
      include_point: true
    }) %} 
    {% include "../_includes/library/components/tooltip.njk" %}
    <p>
      , which helps prevent layout shift when the width changes. The class
      <code>glitch-text</code> comes with a pre loaded mono-spaced font along
      with other easy styles for all glitch related text.
    </p>
  </div>

  <h3>Glitch Cycle</h3>
  <p>
    The glitch cycle uses the <code>glitch-cycle</code> class along with
    multiple <code>data</code> attributes to configure.
  </p>
  <ul class="classic-list">
    <li>
      <code>data-glitch-cycle-words</code> A comma separated string of words to
      that will appear in the cycle.
    </li>
    <li>
      <code>data-glitch-cycle-colors</code> A comma separated string of colors
      (any valid css property, including variables) to that will appear in the
      cycle.
    </li>
    <li>
      <code>data-glitch-cycle-interval</code> A number, in ms that represents
      the time between each word change.
    </li>
  </ul>
  <h4>
    Sample:
    <span
      class="glitch-cycle glitch-text"
      data-glitch-cycle-words="creative, responsive, accessible, innovative, engaging"
      data-glitch-cycle-colors="#e48c66, #007bff, var(--color-font--primary), #c0c0c0, #007bff"
      data-glitch-cycle-interval="2000"
    >
      Creative
    </span>
  </h4>

  <br />

  <h3>Glitch Scroll</h3>
  <p>
    The class <code>glitch-scroll</code> will scramble the text when the element
    comes into view. Use the following data attributes to customize the
    experience:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-glitch-chars</code> String value determining scramle characters
      shown. Default is <code>"upperAndLowerCase"</code>
    </li>
    <li>
      <code>data-glitch-reveal-delay</code> Number, the delay of the scroll
      animation. Default is <code>0.05</code>
    </li>
    <li>
      <code>data-glitch-duration</code> Number, the duration of the glitch
      animation. Default is <code>0.75</code>
    </li>
    <li>
      <code>data-glitch-once</code> An optional boolean that will toggle the
      effect to occur only the first time the element scrolls into view. Default
      is <code>false</code>
    </li>
    <li>
      <code>data-glitch-trigger</code> String, the class or id (don't forget .
      or #) of the element that triggers the effect. Default is the glitch
      element itself.
    </li>
    <li>
      <code>data-glitch-start</code> String, the parameters for scrollTrigger.
      Default is <code>"top 98%"</code>
    </li>
    <li>
      <code>data-glitch-end</code> String, the parameters for scrollTrigger.
      Default is <code>"bottom 2%"</code>
    </li>
    <li>
      <code>data-glitch-markers</code> Optional boolean, markers to help
      build/debug. Default is
      <code>false</code>
    </li>
  </ul>
  <p class="glitch-scroll glitch-text">
    This will glitch out as many times as you scroll into view. Default
    behavior.
  </p>
  <p class="glitch-scroll glitch-text" data-glitch-once="true">
    This will only glitch out once.
  </p>
  <p>
    <span
      class="glitch-scroll glitch-text"
      data-glitch-trigger=".glitch-trigger-subtitle"
      data-glitch-end="bottom center"
    >
      This will glitch when the subtitle "Glitch Trigger/Target" comes into
      view.
    </span>
    <br />
    <span>
      Great for pinned sections, just don't forget to add the '.' with the
      classname!
    </span>
  </p>

  <br />

  <h3>Glitch Hover</h3>
  <p>
    The class <code>glitch-hover</code> causes the text content (works with
    nested elements) to scramble on hover or focus. Comes with the following
    configs:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-glitch-new-text</code> A string that changes the glitch text to
      a new message. Defaults to <code>null</code>
    </li>
    <li>
      <code>data-glitch-out</code> A boolean that toggles if the animation
      should also occur on mouseleave and blur. Defaults to <code>false</code>
    </li>
  </ul>
  <!-- prettier-ignore -->
  {% set btn = ({
    text: 'Hover Me',
    type: 'solid',
    class: 'glitch-hover'
   }) %}
  {% include "../_includes/components/btn.njk" %}
  
  {% set btn = ({
    text: 'Glitch Out',
    type: 'outline',
    class: 'glitch-hover',
    attributes: 'data-glitch-out=true'
   }) %}
  {% include "../_includes/components/btn.njk" %}
  
  {% set btn = ({
    text: 'Change Text',
    type: 'icon-end',
    class: 'glitch-hover',
    attributes: 'data-glitch-new-text="Updated Text"'
   }) %}
  {% include "../_includes/components/btn.njk" %}

  <br />

  <h3 class="glitch-trigger-subtitle">Glitch Trigger/Target</h3>
  <p>
    The class <code>glitch-trigger</code> will act as the hover/focus point to
    trigger the glitch elsewhere. This requires the
    <code>data-glitch-target="glitch-target__arbitrary"</code> which takes a
    unique value that matches the class of the target. The target will then have
    the class that matches <code>class="glitch-target__arbitrary"</code>
  </p>

  <div class="glitch-pair">
    <p>
      This one can get tricky with scaling e.g. using target glitch on a
      component since there would be multiple triggers and targets with the same
      value. A workaround is using a parent wrapper with the class
      <code>glitch-pair</code> IF the elements are siblings in the markup rather
      than nested (such as cta-2).
    </p>
    <br />
    <br />
    <button
      class="cta-1 glitch-trigger tab-element-page"
      data-glitch-target="glitch-target__paragraph"
    >
      Hover or focus me
    </button>
    <br />
    <br />
    <p class="glitch-target__paragraph">This text should now glitch out</p>
  </div>
</section>

<section class="gradient-border-section library-section">
  <h2>[ Gradient border - Util ]</h2>
  <p>
    Gradient borders. Simple but confusing. Saw Okta doing this and wanted to
    see what it was about.
  </p>

  <div class="gradient-border">
    <h3>Gradient border</h3>
    <p>
      Wow so cool! Lorem ipsum dolor sit, amet consectetur adipisicing elit.
      Molestiae commodi veritatis totam harum accusamus quia sint aliquam quod
      non, earum reiciendis, minus consequuntur dolores.
    </p>
  </div>
</section>

<section class="gsap-animate-section library-section">
  <h2 class="gsap-animate-section__title gsap-animate">
    [ GSAP animate - Util ]
  </h2>
  <strong class="gsap-animate-section__subtitle gsap-animate">
    <sup>*</sup>Requires custom code/css to define the animation
  </strong>
  <p class="gsap-animate-section__desc gsap-animate max-width-text">
    With the utility class <code>gsap-animate</code>, you'll unlock the powers
    of GSAP's <code>scrollTrigger</code> plugin. When the element comes into
    view, you'll be able to apply additional styles with the temporary
    <code>gsap-animated</code> class.
  </p>

  <ul class="classic-list">
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-once</code> Boolean, to toggle the animation only the
      first time. Default is <code>false</code>.
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-trigger</code> String, the class or id (don't forget . or
      #) of the element that triggers the effect. Default is the gsap-animate
      element itself.
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-start</code> String, the parameters for scrollTrigger.
      Default is <code>"top 98%"</code>
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-end</code> String, the parameters for scrollTrigger.
      Default is <code>"bottom 2%"</code>
    </li>
    <li class="gsap-animate-section__li gsap-animate">
      <code>data-gsap-markers</code> Boolean, markers to help build/debug.
      Default is
      <code>false</code>
    </li>
  </ul>
</section>

<section class="gsap-stagger-section library-section">
  <h2>[ GSAP stagger - Util ]</h2>
  <strong>
    <sup>*</sup>Requires custom code/css to define the animation
  </strong>
  <p>
    Anytime you want to stagger a wrapper's descendant animations, you can use
    the utility class <code>gsap-stagger</code> on the parent. You can then add
    the class <code>gsap-stagger-child</code> to each child you would like to
    stagger. This taps into the powers of GSAP's
    <code>scrollTrigger</code> plugin so when the elements comes into view,
    you'll be able to apply additional styles with the temporarys
    <code>gsap-stagger-animate</code> class.
  </p>

  <ul
    class="classic-list gsap-stagger-list gsap-stagger"
    data-stagger-delay="0.125"
  >
    <li class="gsap-stagger-child">
      <code>data-gsap-once</code> Boolean, to toggle the animation only the
      first time. Default is <code>false</code>.
    </li>
    <li class="gsap-stagger-child">
      <code>data-gsap-trigger</code> String, the class or id (don't forget . or
      #) of the element that triggers the effect. Default is the gsap-animate
      element itself.
    </li>
    <li class="gsap-stagger-child">
      <code>data-gsap-start</code> String, the parameters for scrollTrigger.
      Default is <code>"top 98%"</code>
    </li>
    <li class="gsap-stagger-child">
      <code>data-gsap-end</code> String, the parameters for scrollTrigger.
      Default is <code>"bottom 2%"</code>
    </li>
    <li class="gsap-stagger-child">
      <code>data-gsap-markers</code> Boolean, markers to help build/debug.
      Default is
      <code>false</code>
    </li>
  </ul>

  <div class="gsap-stagger-sample gsap-stagger" data-stagger-delay="0.05">
    {% for item in range(0, 16) %}
    <div class="gsap-stagger-sample__child gsap-stagger-child">
      <h3 class="h5">Title {{ loop.index }}</h3>
    </div>
    {% endfor %}
    <div></div>
  </div>
</section>

<!-- Text animations -->
<section class="text-fade-section library-section">
  <h2 class="text-fade">[ Text Fade - Util ]</h2>
  <p class="text-fade" data-fade-duration="0.5">
    This uses GSAP's <strong>ScrollTrigger</strong> and
    <strong>SplitText</strong> plugins to fade in either words or characters.
  </p>
  <p class="text-fade" data-fade-type="words" data-fade-duration="0.5">
    This paragraph will animate each word rather than each character. Lorem
    ipsum dolor sit amet consectetur adipisicing elit. Error iste corrupti
    tempora aspernatur, consequatur blanditiis, repellat, quibusdam perferendis
    sequi dignissimos dolores? Magni, nisi quae.
  </p>
  <p
    class="text-fade"
    data-fade-type="chars"
    data-fade-once="true"
    data-fade-style="linear"
    data-fade-duration="2"
  >
    This text should only fade in the <strong>very first time!</strong> The
    letter split should also take a bit longer than expected (2s), making use of
    the data-fill-duration attribute.
  </p>
  <p
    class="text-fade"
    data-fade-style="linear"
    data-fade-scrub="true"
    data-fade-end="bottom 60%"
  >
    This text should scrub in a linear animation.
  </p>
  <br />
  <p class="text-fade">
    You can use the <code class="gsap-animate">text-fade</code> utility class
    with the following attributes:
  </p>
  <ul class="classic-list">
    <li class="text-fade">
      <code class="gsap-animate">data-fade-type</code> A string that takes in
      <code class="gsap-animate">words | chars</code>. Defaults to
      <code class="gsap-animate">words</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-style</code> A string that takes in
      <code class="gsap-animate">linear | random</code>. Defaults to
      <code class="gsap-animate">random</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-duration</code> A number to control
      the animation duration. Defaults to <code class="gsap-animate">0.25</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-once</code> A boolean to fire to
      animation only the first time it comes into view. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-scrub</code> A boolean to scrub
      through the animation rather than playing it. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-start</code> A string to set the
      start animation. Defaults to
      <code class="gsap-animate">"top 98%"</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-end</code> A string to set the end
      animation. Defaults to
      <code class="gsap-animate">"bottom 2%"</code>
    </li>
    <li class="text-fade">
      <code class="gsap-animate">data-fade-markers</code> A boolean to toggle
      visual debugging markers.
      <code class="gsap-animate">false</code>
    </li>
  </ul>
</section>

<section class="text-fill-section">
  <h2 class="text-fill">[ Text Fill - Util ]</h2>
  <br />
  <br />
  <strong class="text-fill" data-fill-scrub="false">
    Note: Both flexbox (element or parent) and position absolute can affect the
    line by line animation <sup>*</sup>
  </strong>
  <br />
  <br />
  <h3 class="text-fill" data-fill-end="bottom 40%">
    Slow it down with 'bottom 20%'.....
  </h3>
  <br />
  <br />
  <p class="text-fill" data-fill-end="bottom 40%">
    Use the <strong>'text-fill'</strong> utility class to get started with this
    effect. <strong>Note</strong> there are some caveats such as flexbox parent
    containers and different position absolute. Modify the speed with
    <strong>'data-fill-end'</strong> This comes with aditional configs, one of
    which detaches scrub and allows you to fire the animation once. Lorem ipsum
    dolor, sit amet consectetur adipisicing elit. Non laudantium ad tempora
    facilis tempore, enim earum molestiae iusto doloremque incidunt voluptatum,
    dolorum, obcaecati sint officia cum quia. Itaque et, ad accusantium a
    impedit, consectetur, magni debitis tenetur ab odio laborum!
  </p>
  <br />
  <br />
  <p
    class="text-fill"
    data-fill-start="top 80%"
    data-fill-end="bottom 80%"
    data-fill-scrub="false"
    data-fill-once="true"
    data-fill-duration="5"
    data-fill-markers="false"
  >
    This sample will only fire once with
    <strong class="text-underline">data-fill-once="true"</strong>. It also
    starts a little bit later with
    <strong class="text-underline">data-fill-start="top 80%"</strong>. The
    duration can also be altered with
    <strong class="text-underline">data-fill-duration="NUMBER"</strong> Lorem
    ipsum dolor, sit amet consectetur adipisicing elit. Non laudantium ad
    tempora facilis tempore, enim earum molestiae iusto doloremque incidunt
    voluptatum, dolorum, obcaecati sint officia cum quia. Itaque et, ad
    accusantium a impedit, consectetur, magni debitis tenetur ab odio laborum!
  </p>
  <br />
  <br />
  <ul class="classic-list">
    <li>Requires the util class <code>text-fill</code></li>
    <li>
      <code>data-fill-start</code> An optional string that takes two percentage
      values. The values represent the target element and the viewport, where 0%
      is the top while 100% is the bottom. Default is
      <code>"0% 90%"</code>
    </li>
    <li>
      <code>data-fill-end</code> An optional string that takes two percentage
      values. The values represent the target element and the viewport, where 0%
      is the top while 100% is the bottom. Default is
      <code>"100% 60%"</code>
    </li>
    <li>
      <code>data-fill-scrub</code> boolean, to toggle scrubbing. Defaults to
      <code>true</code>
    </li>
    <li>
      <code>data-fill-duration</code> A number that represents the number of
      seconds to complete the animation. <strong>Requires</strong>
      <code>data-fill-scrub="false"</code>. Defaults to
      <code>1</code>
    </li>
    <li>
      <code>data-fill-once</code> boolean, to toggle multiple animations when
      scrolling to the element. <strong>Requires</strong>
      <code>data-fill-scrub="false"</code>. Defaults to <code>false</code>
    </li>
    <li>
      <code>data-fill-markers</code> boolean, to toggle visual debugging
      markers. Defaults to <code>false</code>
    </li>
  </ul>
</section>

<section class="text-reveal-section library-section">
  <h2
    class="text-reveal"
    data-reveal-type="chars"
    data-reveal-duration="0.32"
    data-reveal-ease="back.out(2.5)"
  >
    [ Text reveal - Util ]
  </h2>
  <p class="text-reveal">
    This uses GSAP's <strong>ScrollTrigger</strong> and
    <strong>SplitText</strong> plugins to reveal in either words or characters.
  </p>
  <p
    class="text-reveal"
    data-reveal-duration="1"
    data-reveal-ease="back.out(3)"
    data-reveal-scrub="true"
    data-reveal-end="bottom 75%"
    style="max-width: 750px"
  >
    This paragraph will <strong>scrub</strong> through each word and
    demonstrates that it works in a paragraph with multiple lines. Lorem ipsum
    dolor sit amet consectetur adipisicing elit. Error iste corrupti tempora
    aspernatur, consequatur blanditiis, repellat, quibusdam perferendis sequi
    dignissimos dolores? Magni, nisi quae.
  </p>
  <p
    class="text-reveal"
    data-reveal-type="chars"
    data-reveal-once="true"
    data-reveal-duration="0.35"
    data-reveal-ease="back.out(2)"
  >
    This text will split by <code>chars</code> only the
    <strong>very first time!</strong> The duration will also be a bit longer
    than expected (0.35s), making use of the data-reveal-duration attribute.
  </p>
  <p
    class="text-reveal"
    data-reveal-scrub="true"
    data-reveal-end="bottom 60%"
    data-reveal-from="top"
  >
    This text will reveal from the top, instead of from the bottom.
  </p>
  <br />
  <p class="text-reveal">
    You can use the <code class="gsap-animate">text-reveal</code> utility class
    with the following attributes:
  </p>
  <ul class="classic-list text-reveal-list">
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-type</code> A string of either
      <code class="gsap-animate">words | chars</code>. Defaults to
      <code class="gsap-animate">chars</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-from</code> A string of either
      <code class="gsap-animate">bottom | top</code> to controls the animation
      origin. Defaults to
      <code class="gsap-animate">bottom</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-duration</code> A number to control
      the animation duration. Defaults to <code class="gsap-animate">0.25</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-stagger</code> A number to control
      stagger between each word or character. Defaults to
      <code class="gsap-animate">0.05</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-once</code> A boolean to fire to
      animation only the first time it comes into view. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-scrub</code> A boolean to scrub
      through the animation rather than playing it. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-start</code> A string to set the
      start animation. Defaults to
      <code class="gsap-animate">"top 98%"</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-end</code> A string to set the end
      animation. Defaults to
      <code class="gsap-animate">"bottom 2%"</code>
    </li>
    <li class="text-reveal">
      <code class="gsap-animate">data-reveal-markers</code> A boolean to toggle
      visual debugging markers.
      <code class="gsap-animate">false</code>
    </li>
  </ul>
</section>

<section class="text-scale-section library-section">
  <h2 class="text-scale">[ Text scale - Util ]</h2>
  <p class="text-scale" data-scale-duration="0.5">
    This uses GSAP's <strong>ScrollTrigger</strong> and
    <strong>SplitText</strong> plugins to scale in either words or characters.
    This is position aware, meaning that the transform origin will determine the
    words placement in the sentence.
  </p>
  <p
    class="text-scale"
    data-scale-type="words"
    data-scale-duration="0.15"
    data-scale-scrub="true"
    data-scale-end="bottom 75%"
    style="max-width: 750px"
  >
    This paragraph will <strong>scrub</strong> animate each word rather than
    each character. Lorem ipsum dolor sit amet consectetur adipisicing elit.
    Error iste corrupti tempora aspernatur, consequatur blanditiis, repellat,
    quibusdam perferendis sequi dignissimos dolores? Magni, nisi quae.
  </p>
  <p
    class="text-scale"
    data-scale-type="chars"
    data-scale-once="true"
    data-scale-style="linear"
    data-scale-duration="2"
  >
    This text should only scale in the <strong>very first time!</strong> The
    letter split should also take a bit longer than expected (2s), making use of
    the data-scale-duration attribute.
  </p>
  <br />
  <p class="text-scale">
    You can use the <code class="gsap-animate">text-scale</code> utility class
    with the following attributes:
  </p>
  <ul class="classic-list">
    <li class="text-scale">
      <code class="gsap-animate">data-scale-type</code> A string that takes in
      <code class="gsap-animate">words | chars</code>. Defaults to
      <code class="gsap-animate">chars</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-style</code> A string that takes in
      <code class="gsap-animate">linear | random</code>. Defaults to
      <code class="gsap-animate">random</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-duration</code> A number to control
      the animation duration. Defaults to <code class="gsap-animate">0.25</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-once</code> A boolean to fire to
      animation only the first time it comes into view. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-scrub</code> A boolean to scrub
      through the animation rather than playing it. Defaults to
      <code class="gsap-animate">false</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-start</code> A string to set the
      start animation. Defaults to
      <code class="gsap-animate">"top 98%"</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-end</code> A string to set the end
      animation. Defaults to
      <code class="gsap-animate">"bottom 2%"</code>
    </li>
    <li class="text-scale">
      <code class="gsap-animate">data-scale-markers</code> A boolean to toggle
      visual debugging markers.
      <code class="gsap-animate">false</code>
    </li>
  </ul>
</section>
<!-- Text animations -->

<section class="tilt-cards library-section cursor-hide">
  <h2>[ Tilt - Util ]</h2>

  <strong>Requires additional script tag*</strong>
  <p>
    A subtle 3d effect for desktop users that uses the
    <a
      class="classic-link tab-element-page"
      href="https://micku7zu.github.io/vanilla-tilt.js/"
      target="_blank"
      >vanilla tilt js library/cdn</a
    >. Throw the <code>data-tilt</code> attribute on any element to activate.
    Comes with the following configs:
  </p>
  <ul class="classic-list tilt-target__card">
    <li>
      <code>data-tilt-reverse</code> boolean, Reverse the tilt direction.
      Default is
      <code>false</code>
    </li>
    <li>
      <code>data-tilt-max</code> number, max tilt rotation. Default is
      <code>35</code>
    </li>
    <li>
      <code>data-tilt-startX</code> number, resting tilt along x-axis. Default
      is
      <code>0</code>
    </li>
    <li>
      <code>data-tilt-startY</code> number, resting tilt along y-axis. Default
      is
      <code>0</code>
    </li>
    <li>
      <code>data-tilt-perspective</code> number, lower value is more dramatic.
      Default is
      <code>1000</code>
    </li>
    <li>
      <code>data-tilt-scale</code> number scale on hover (subtle pop effect).
      Default is
      <code>1</code>
    </li>
    <li>
      <code>data-tilt-speed</code> number, speed of enter/exit transition.
      Default is
      <code>300</code>
    </li>
    <li>
      <code>data-tilt-transition</code> boolean, set a transition on enter/exit.
      Default is <code>true</code>
    </li>
    <li>
      <code>data-tilt-axis</code> string, limit to only one axis. Takes
      <code>x | y | null</code> Default is <code>null</code>
    </li>
    <li>
      <code>data-tilt-reset</code> boolean, toggle tilt reset on exit. Default
      is
      <code>true</code>
    </li>
    <li>
      <code>data-tilt-easing</code> string, easing value on enter/exit. Accepts
      cubic-bezier curves. Default is <code>cubic-bezier(.03,.98,.52,.99)</code>
    </li>
    <li>
      <code>data-tilt-glare</code> boolean, toggle glare effect. Default is
      <code>false</code>
    </li>
    <li>
      <code>data-tilt-max-glare</code> number between 0 and 1 for opacity.
      Default is
      <code>1</code>
    </li>
    <li>
      <code>data-tilt-mouse-event-element</code> string, css class or link to
      HTML elem that triggers tilt effect. Requires '.' on class. Default is
      <code>null</code>
    </li>
    <li>
      <code>data-tilt-gyroscope</code> boolean, to toggle on orientation
      devices. Default is <code>true</code>
    </li>
  </ul>
  <div class="tilt-card-group">
    <div class="tilt-card" data-tilt>
      <h3>Default</h3>
      <br />
      <p>No extra attributes other than <code>data-tilt</code></p>
      <!-- prettier-ignore -->
      {% set cta_1 = { 
        text: 'Learn more', 
        url: 'https://micku7zu.github.io/vanilla-tilt.js/' } 
      %} 
      {% include "../_includes/components/cta-group.njk" %}
    </div>
    <div
      class="tilt-card tilt-card--3d"
      data-tilt
      data-tilt-reverse="true"
      data-tilt-max="10"
      data-tilt-startX="0"
      data-tilt-startY="0"
      data-tilt-perspective="2400"
      data-tilt-speed="750"
      data-tilt-reset="true"
      data-tilt-glare="true"
      data-tilt-max-glare="0.125"
    >
      <h3>Reversed</h3>
      <br />
      <p>
        This sublte reversed tilt effect not only includes a glare, but also has
        a different transition speed.
      </p>
      <br />
      <p>It also sets up the 3d/parallax effect:</p>
      <ol class="classic-list">
        <li>
          Add <code>transform-style: preserve-3d</code> to the tilt element.
        </li>
        <li>
          Add <code>transform: perspective(1000px);</code> to the tilt element.
        </li>
        <li>
          Add <code>transform: translateZ(20px);</code> to the inner element(s)
          that you want to pop.
        </li>
      </ol>
      {% set cta_1 = { text: 'Get started', url: 'https://axyscreative.com' } %}
      {% set cta_2 = { text: 'Visit FAQ', url: 'https://axyscreative.com' } %}
      {% include "../_includes/components/cta-group.njk" %}
    </div>
    <div
      class="tilt-card"
      data-tilt
      data-tilt-reverse="false"
      data-tilt-max="20"
      data-tilt-startX="0"
      data-tilt-startY="0"
      data-tilt-perspective="750"
      data-tilt-speed="100"
      data-tilt-reset="false"
      data-tilt-glare="true"
    >
      <h3>Dramatic</h3>
      <br />
      <p>A bit stronger with the max-glare and the tilt doesn't reset.</p>
      {% set cta_1 = { text: 'Get started', url: 'https://axyscreative.com' } %}
      {% set cta_2 = { text: 'Visit FAQ', url: 'https://axyscreative.com' } %}
      {% include "../_includes/components/cta-group.njk" %}
    </div>
  </div>
</section>

<section class="typing-section library-section">
  <h2>
    <span class="typing-scroll" data-typing-cursor="none"
      >[ Typing Text&nbsp;-&nbsp;</span
    >
    <span
      class="typing-cycle"
      data-typing-cycle-words="Util, Class, Block"
      data-typing-delay="800"
      data-typing-on-scroll="true"
    >
      Util
    </span>
    &nbsp;]
  </h2>

  <h3>Typing Cycle</h3>
  <p>
    The typing cycle effect mimics human typing in an endless loop. It uses the
    <code>typing-cycle</code> class along with multiple
    <code>data</code> attributes to configure.
  </p>
  <ul class="classic-list">
    <li><code>data-typing-cycle-words</code> An array of strings.</li>
    <li>
      <code>data-typing-cycle-colors</code> An array of strings. Takes any valid
      css color value.
    </li>
    <li>
      <code>data-typing-speed-in</code> A number (in ms) that controls the
      typing speed. Default is <code>120</code>
    </li>
    <li>
      <code>data-typing-speed-out</code> A number (in ms) that controls the
      deleting speed. Default is <code>50</code>
    </li>
    <li>
      <code>data-typing-cycle-interval</code> A number (in ms) that controls the
      interval between when the word finishes typing & when the word starts
      deleting. Default is <code>2000</code>
    </li>
    <li>
      <code>data-typing-delay</code> Optional number (in ms) representing the
      initial delay of the animation. Default is <code>0</code>
    </li>
    <li>
      <code>data-typing-cursor</code> A string of either
      <code>caret | underscore | none</code> to alter the text cursor. Defaults
      to <code>caret</code>
    </li>
    <li>
      <code>data-typing-on-scroll</code> Optional boolean, to start the cycle
      when the element scrolls into view. Default is <code>false</code>
    </li>
  </ul>
  <h4>
    The human senses:
    <span
      class="typing-cycle"
      data-typing-cycle-words="touch, sight, sound, taste, smell"
      data-typing-cycle-colors="var(--color-brand--primary), forestgreen, #c0c0c0, crimson, slateblue"
      data-typing-speed-in="100"
      data-typing-speed-out="25"
      data-typing-cycle-interval="2000"
      data-typing-delay="1500"
      data-typing-cursor="underscore"
    ></span>
  </h4>
  <h4>
    The four seasons:
    <span
      class="typing-cycle"
      data-typing-cycle-words="Spring, Summer, Autumn, Winter"
      data-typing-speed-in="75"
      data-typing-speed-out="200"
      data-typing-cycle-interval="1250"
      data-typing-cursor="none"
    ></span>
  </h4>

  <br />

  <h3>Typing Scroll</h3>
  <p>
    The class <code>typing-scroll</code> will trigger the typing animation when
    the element comes into view. Comes with the following configs:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-typing-once</code> A boolean to toggle if the animation should
      fire each time the element scrolls into view. Default is
      <code>false.</code>
    </li>
    <li>
      <code>data-typing-speed</code> The number (in ms), representing the typing
      speed. Default is <code>50</code>
    </li>
    <li>
      <code>data-typing-delay</code> Optional number (in ms), representing the
      initial delay of the animation. Default is <code>0</code>
    </li>
    <li>
      <code>data-typing-cursor</code> A string of either
      <code>caret | underscore | none</code> to alter the text cursor. Defaults
      to <code>caret</code>
    </li>
  </ul>

  <p class="typing-scroll">
    This will type out as many times as you scroll into view. Default behavior.
  </p>
  <p
    class="typing-scroll"
    data-typing-once="true"
    data-typing-speed="25"
    data-typing-delay="3200"
    data-typing-cursor="underscore"
  >
    This will only type out once, the very first time it comes into view. Also
    has a delay of 3200ms.
  </p>
</section>
