---
layout: app
path: library/components
# Non public facing DELETE ME CHANGE ME
---

<!-- prettier-ignore -->
{% set hero_simple = ({
  title: 'Components',
  desc: 'A collection of reusable common components to help simplify your built and speed things up.'
 }) %}
{% include '../_includes/library/sections/hero-simple.njk' %}

<section class="accordion-section section-width--thin">
  <h2 class="h5" style="margin-bottom: 48px">[ Accordion - Component ]</h2>
  <strong>
    Note, this section contains the utility class
    <code>section-width--thin</code> to add extra inline padding.
  </strong>
  <p>
    Accordions can be used to tuck away lengthy info. Theyâ€™re often used for FAQ
    sections. The <code>accordion.njk</code> component comes with the following
    configs:
  </p>
  <br />
  <br />

  <ul class="classic-list">
    <li>
      <code>id</code> a string, unique identifier if thereâ€™s more than one
      accordion
    </li>
    <li>
      <code>icon</code> an optional string, the path to the icon used for the
      accordion arrow. Default is an empty string (no icon)
    </li>
    <li>
      <code>plus</code> a boolean to use a plus sign (html markup) instad of an
      icon. Defaults to <code>false</code>
    </li>
    <li>
      <code>single_open</code> a boolean to only allow one accordion open at a
      time. Defaults to <code>false</code>
    </li>
    <li>
      <code>items</code> an object that takes in <code>title</code> and
      <code>content</code> both of which are strings (content is 'safe' for
      markup) â€” used for the accordion title and message within. You also have
      access to <code>content_start</code> if using
      <code>skip-to-content</code> util in the header.
    </li>
  </ul>

  <br />
  <br />

  <p style="display: block; margin-bottom: 64px">
    Accordion with <code>icon</code> config and <code>single_open</code> set to
    true.
  </p>
  <!-- prettier-ignore -->
  {% set accordion = library.accordion.accordion_1 %}
  {% include '../_includes/library/components/accordion.njk' %}

  <br /><br /><br /><br />

  <p style="display: block; margin-bottom: 64px">
    Accordion with <code>plus</code> config
  </p>
  <!-- prettier-ignore -->
  {% set accordion = library.accordion.accordion_2 %}
  {% include '../_includes/library/components/accordion.njk' %}
</section>

<section class="alert-section library-section">
  <h2 class="h5">[ Alert - Component + Util ]</h2>

  <p>
    Alerts are tools used to display notifications and other helpful info to the
    user. They can be used to display success, info, warning, or error content.
    The <code>alert.njk</code> component used along side a utility class
    <code>alert-trigger</code> on a button to fire the alert. Once you include
    the alert.njk you have access to the following props on the alert object:
  </p>
  <ul class="classic-list">
    <li>
      <code>id</code> a string value, unique identifier that will plug into the
      <code>aria-controls</code> of the button that fires the alert.
    </li>
    <li>
      <code>type</code> a string value of
      <code>success | info | warning | error</code> that alters the icon and
      color of the alert.
    </li>
    <li>
      <code>title</code> a string value for the alert title. Recommended to keep
      it short.
    </li>
    <li><code>message</code> a string value that accepts custom markup.</li>
    <li>
      <code>auto_close</code> an optional number (in ms) that controls if the
      alert will automatically close. A falsey value will add a close button to
      manually close the alert.
    </li>
    <li>
      <code>left_border</code> an optional boolean that adds a left border to
      the card. Defaults to <code>false</code>
    </li>
  </ul>

  <p>Here's the setup for the <code>button</code> tag:</p>
  <ul class="classic-list">
    <li>
      <code>alert-trigger</code> the utility class to signal this is an
      alert-trigger.
    </li>
    <li>
      <code>aria-controls</code> a string value that goes on the button that
      matches the alert id.
    </li>
  </ul>

  <div class="alert-section__group">
    <!-- prettier-ignore -->
    {% set alert = ({
      id: 'sample-alert-1',
      type: 'success',
      title: 'Basic "success" Alert',
      message: '',
      auto_close: 1600
    }) %}
    {% set btn = ({
      text: 'Success Alert',
      type: 'solid',
      class: 'alert-trigger',
      attributes: 'aria-controls='~alert.id~''
    }) %}
    {%include "../_includes/components/btn.njk" %}
    {%include "../_includes/library/components/alert.njk" %}

    <!-- prettier-ignore -->
    {% set alert = ({
      id: 'sample-alert-2',
      type: 'info',
      title: 'Basic "info" Alert',
      message: 'A simple alert. This will close in 2.8 seconds',
      auto_close: 2800,
      timer: true,
      left_border: false
    }) %}
    {% set btn = ({
      text: 'Info Alert',
      type: 'outline',
      icon_end: '/static/img/library/icon-google-info-circle.svg',
      class: 'alert-trigger',
      attributes: 'aria-controls='~alert.id~''
    }) %}
    {%include "../_includes/components/btn.njk" %}
    {% include "../_includes/library/components/alert.njk" %}

    <!-- prettier-ignore -->
    {% set alert = ({
      id: 'sample-alert-3',
      type: 'warning',
      title: 'Basic "warning" Alert',
      message: 'A warning alert with a left_border. This alert will auto close in 3.6 seconds.',
      auto_close: 3600,
      left_border: true,
      timer: false,
      link_1: {
        text: 'Learn more',
        url: 'https://www.axyscreative.com',
        new_tab: true
      }
    }) %}
    {% set btn = ({
      text: 'Warning Alert',
      type: 'text',
      icon_end: '/static/img/library/icon-google-warning-triangle.svg',
      class: 'alert-trigger',
      attributes: 'aria-controls='~alert.id~''
    }) %}
    {%include "../_includes/components/btn.njk" %}
    {% include "../_includes/library/components/alert.njk" %}

    <!-- prettier-ignore -->
    {% set alert = ({
      id: 'sample-alert-4',
      type: 'error',
      title: 'Basic "error" Alert',
      message: 'An error alert. This alert doesn&rsquo;t have auto_close so you have to close it manually.',
      auto_close: 0,
      left_border: true,
      link_1: {
        text: 'Learn more',
        url: 'https://www.axyscreative.com',
        new_tab: true
      },
      link_2: {
        text: 'Google it',
        url: 'https://www.google.com',
        new_tab: true
      }
    }) %}
    {% set btn = ({
      text: 'Error Alert',
      type: 'underline',
      icon_end: '/static/img/library/icon-google-x-octagon.svg',
      class: 'alert-trigger',
      attributes: 'aria-controls='~alert.id~''
    }) %}
    {%include "../_includes/components/btn.njk" %}
    {% include "../_includes/library/components/alert.njk" %}
  </div>
</section>

<section class="carousel-swiper-section">
  <h2 class="h5">[ Carousel 'Swiper' - Component ]</h2>

  <!-- prettier-ignore -->
  {% set carousel_autoplay = library.carousel_swiper.autoplay %}
  {% set carousel_controls = library.carousel_swiper.controls %}
  {% set carousel_pagination = library.carousel_swiper.pagination %}
  {% set carousel_slides = library.carousel_swiper.slides %}
  {% include '../_includes/library/components/carousel-swiper.njk' %}
</section>

<section class="clipboard-copy-section library-section">
  <h2 class="h5">[ Clipboard Copy - Component + Util ]</h2>
  <p>
    Copy any string to the userâ€™s clipboard using the clipboard-copy.njk
    component. This requires a few things:
  </p>
  <ul class="classic-list">
    <li>
      <code>id</code> a string value for the unique component id. This will also
      be passed to the html element target.
    </li>
    <li>
      <code>copy_message</code> a string value for the text that will be copied
      to the clipboard. Note: this accepts markup (toggle 'safe' filter in
      component to turn off)
    </li>
    <li>
      <code>button_text</code> an optional string to change the copy button
      text. Defaults to 'Copy'
    </li>
    <li>
      <code>button_text_active</code> an optional string to change the copy
      button text when clicked. Defaults to 'Copied!'
    </li>
    <li>
      <code>icon</code> optional string, the file path to the icon shown on the
      button. Default icon provided. Use <code>null</code> to remove the icon.
    </li>
  </ul>

  <br />
  <h6>Most basic clipboard-copy usage</h6>
  {% set alert = null %}
  <!-- prettier-ignore -->
  {% set a11y_tab = 'tab-element-page' %}
  {% set clipboard_copy = ({id: 'clipboard-copy-1'}) %}
  {% include "../_includes/library/components/clipboard-copy.njk" %}
  <p id="{{ clipboard_copy.id }}">
    Copy this message by clicking the button above!
  </p>

  <br />
  <h6>Copying CMS tokens</h6>
  <!-- prettier-ignore -->
  {% set clipboard_copy = ({
    id: 'clipboard-copy-2',
    btn_text: 'Copy Token',
    btn_text_active: 'Token Copied!',
    icon: null
  }) %}
  {% include "../_includes/library/components/clipboard-copy.njk" %}
  <p id="{{ clipboard_copy.id }}">&lbrack;%br%&rbrack;</p>

  <br />
  <h6>Hooked up to alert.njk</h6>
  <!-- prettier-ignore -->
  {% set clipboard_copy = ({
    id: 'clipboard-copy-3',
    btn_text: 'Copy Message',
    btn_text_active: 'Copied Successfully!',
    btn_text_swap_time: 5600
  }) %}
  {% set alert = ({
    id: 'copy-alert-1',
    type: 'success',
    title: 'Copy Successful!',
    message: 'Way to go! You actually copied the message to your clipboard. Hooray! ðŸŽ‰',
    auto_close: 5600,
    timer: true
  }) %}
  {% include "../_includes/library/components/clipboard-copy.njk" %}
  <p id="{{ clipboard_copy.id }}">
    Sample text three â€” This will copy to the clipboard.
  </p>
  {% include "../_includes/library/components/alert.njk" %}
</section>

<section class="counter-section library-section">
  <h2 class="h5">[ Counter - Component ]</h2>

  <p>
    The counter can be used to reflect stats and showcase data. It comes with a
    wide range of configs.
  </p>
  <ul class="classic-list">
    <li><code>digit</code> the numeric value you're counting to.</li>
    <li>
      <code>comma</code> a boolean to toggle the comma every thousand. Defaults
      to <code>false</code>
    </li>
    <li>
      <code>prefix</code> an optional string at the start of the digit e.g. $
    </li>
    <li>
      <code>suffix</code> an optional string at the end of the digit e.g. M
    </li>
    <li><code>label</code> a string describing what the stat measures</li>
    <li>
      <code>duration</code> a number (in ms) for the count to complete the
      animation. Defaults to <code>2400</code>
    </li>
    <li>
      <code>once</code> a boolean for whether or not this should animate each
      time it comes into view. Defaults to <code>false</code>
    </li>
    <li>
      <code>ticker</code> a boolean to alter the display animation. Defaults to
      <code>false</code> Note: doesn't work with <code>duration</code> property.
    </li>
    <li><code>class</code> a string value for a custom css class</li>
  </ul>

  <div class="counter-section__group">
    <!-- prettier-ignore -->
    {% set counter_data = library.counter.counter_1 %} 
    {% include "../_includes/library/components/counter.njk" %}
    <!-- prettier-ignore -->
    {% set counter_data = library.counter.counter_2 %} 
    {% include "../_includes/library/components/counter.njk" %}
    <!-- prettier-ignore -->
    {% set counter_data = library.counter.counter_3 %} 
    {% include "../_includes/library/components/counter.njk" %}
    <!-- prettier-ignore -->
    {% set counter_data = library.counter.counter_4 %} 
    {% include "../_includes/library/components/counter.njk" %}
  </div>
</section>

<section class="form-section">
  <h2 class="h5">[ Form Feedback - Component ]</h2>
  <strong>Note: Forms require additional setup in Netlify.</strong>
  <br />
  <br />
  <p>
    After submitting the form, the user sees a temporary feedback message.
    Either success or error.
  </p>
  <br />
  <br />
  <!-- prettier-ignore -->
  {% set form_data = library.form_contact.form_data %}
  {% include "../_includes/library/components/form-feedback.njk" %}
</section>

<section class="form-section">
  <h2 class="h5">[ Form Redirect - Component ]</h2>
  <p>After submitting the form, the user is redirected to a new page.</p>
  <br />
  <br />
  <!-- prettier-ignore -->
  {% set form_data = library.form_redirect.form_data %}
  {% include "../_includes/library/components/form-redirect.njk" %}
</section>

<section class="image-comparison-section library-section">
  <h2 class="h5">[ Image Comparison - Component ]</h2>
  <p>Coming soon!</p>
</section>

<section class="tile-shuffle-section library-section">
  <h2 class="h5">[ Image Shuffle - Component ]</h2>
  <p>
    Traditionally used to show off a logos, but could be adapted to shuffle
    through any kind of content.
  </p>
</section>

<section class="marquee-section section-width--full">
  <div class="library-section-info section-width">
    <h2 class="h5">[ Marquee - Component ]</h2>
    <p>
      Display content across the page using the marquee. Comes with the
      following configs:
    </p>
    <ul class="classic-list">
      <li>
        <code>text</code> Accepts a string value and will display the message
        passed in. (Not recommneded to use with <code>imgs</code>)
      </li>
      <li>
        <code>imgs</code> Accepts an array of images (taking src and alt props).
        (Not recommneded to use with <code>text</code>)
      </li>
      <li>
        <code>count</code> The number of marquee elements stacked on top of one
        another. Defaults to <code>1</code>
      </li>
      <li>
        <code>scroll-alternate</code> A boolean, alternate the marquee animation
        direction based on the user's scroll direction. Defaults to
        <code>false</code>. Also adds the modifier class
        <code>marquee--alternate</code>.
      </li>
      <li>
        <code>velocity</code> A number that adjusts how dramatic the translate
        is (also used with <code>scrub</code>). Default is <code>0</code> (which
        removes the velocity and works nicely with
        <code>scroll_alternate: false</code> ).
      </li>
      <li>
        <code>scrub</code> A boolean that disabled the auto scrolling/panning
        and instead hooks up the scroll to the user's scroll position. Requires
        <code>velocity</code> and defaults to <code>false</code>
      </li>
      <li>
        <code>speed</code> A number representing the animation speed above
        769px. Defaults to <code>28</code>
      </li>
      <li>
        <code>speed-md</code> A number representing the animation speed below
        768px. Defaults to <code>24</code>
      </li>
      <li>
        <code>speed-sm</code> A number representing the animation speed below
        480px. Defaults to <code>20</code>
      </li>
    </ul>
  </div>
  <div class=""></div>
  <!-- prettier-ignore -->
  {% set marquee = library.marquee.marquee_1 %}
  {% include '../_includes/library/components/marquee.njk' %}
  <br /><br /><br /><br />
  <div class="section-width" style="padding-block: 0">
    [ This marquee is the simplest form of the marquee component ]
  </div>
  <br /><br /><br /><br /><br /><br />
  <!-- prettier-ignore -->
  {% set marquee = library.marquee.marquee_2 %}
  {% include '../_includes/library/components/marquee.njk' %}
  <br /><br /><br /><br />
  <div class="section-width" style="padding-block: 0">
    [ This is a double marquee that changes direction based on scroll direction
    ]
  </div>
  <br /><br /><br /><br /><br /><br />
  <!-- prettier-ignore -->
  {% set marquee = library.marquee.marquee_3 %}
  {% include '../_includes/library/components/marquee.njk' %}
  <br />
  <br />
  <div class="section-width" style="padding-block: 0">
    [ This is an image marquee that scrubs instead of auto animates. ]
  </div>
</section>

<section class="solar-system-section library-section">
  <h2 class="h5">[ Solar system - Component ]</h2>

  <p>
    A way to display badges and an image. Visit
    <a
      class="classic-link tab-element-page"
      href="https://www.delphi.ai/"
      target="_blank"
    >
      https://www.delphi.ai/
    </a>
    to see the sample.
  </p>

  <br />
  <br />

  <!-- prettier-ignore -->
  {% set orbit_data = library.solar_system %} 
  {% include "../_includes/library/components/solar-system.njk" %}
</section>

<section class="tabs-section library-section">
  <div class="library-section-info">
    <h2 class="h5">[ Tabs - Component ]</h2>
    <p>
      A simplified version of the util tabs. Used when the tab content structure
      is identical across all tabs.
    </p>
  </div>

  <!-- prettier-ignore -->
  {% set tabs = library.tabs %}
  {% include "../_includes/library/components/tabs.njk" %}
</section>

<section class="tabs-section library-section">
  <div class="library-section-info">
    <h2 class="h5">[ Tabs - Util ]</h2>
    <p>
      Intended for unique markup across each panel, accepting custom markup.
    </p>
    <strong>
      Note: this uses the <code>data-toggle-slider</code> attribute to change
      the control style. This also allows you to alter which tab is active by
      leaving <code>hidden</code> off of that panel.
    </strong>
  </div>

  <div class="tabs tabs--util cursor-hide" data-toggle-slider="undefined">
    <div class="tabs-content">
      <div
        class="tabs-panel"
        data-tab-label="Tab Label 1"
        role="tabpanel"
        hidden
      >
        <h3 class="h6">Custom markup</h3>
        <p class="max-width-text">
          The tabs util allows for custom markup with minimal setup. The tab
          controls are generated via JavaScript, based on the
          <code>data-tab-label</code> attribute.
        </p>
      </div>

      <div class="tabs-panel" data-tab-label="Tab Label 2" role="tabpanel">
        <p>This tab has a video</p>
        <video src="/video.mp4" controls></video>
      </div>

      <div
        class="tabs-panel"
        data-tab-label="Tab Label 3"
        role="tabpanel"
        hidden
      >
        <h3 class="h6">This uses a component</h3>

        <!-- prettier-ignore -->
        {% set btn = ({
          text: 'Button within tabs',
          type: 'solid',
          class: '',
          attributes: ''
        }) %}
        {% include "../_includes/components/btn.njk" %}
      </div>
    </div>
  </div>
</section>

<section class="testimonials-section library-section">
  <h2 class="h5">[ Testimonials - Component ]</h2>
  <p>Coming Soon!</p>

  <h3 class="h6">Auto carousel</h3>
  <p>
    Visit
    <a
      class="classic-link tab-element-page"
      href="https://www.delphi.ai/"
      target="_blank"
    >
      https://www.delphi.ai/
    </a>
    to see the sample.
  </p>
</section>

<section class="theme-toggle-section library-section">
  <h2 class="h5">[ Theme toggle - Component ]</h2>

  <strong>
    Because of input/label IDs, itâ€™s recommended to only use one component per
    page.
  </strong>

  <p>
    Make use of css variables to handle dynamic color for text, links, buttons
    and backgrounds.
  </p>
  <p>Be sure to include the <code>theme-toggle.js</code> file</p>

  {% include "../_includes/library/components/theme-toggle.njk" %}

  <p>
    You can also have a dynamic image source based on the theme with the
    <code>theme-img</code> class! Then use the following attributes to set up
    the source path.
  </p>
  <ul class="classic-list">
    <li><code>data-light</code> The path to the image shown in light mode.</li>
    <li><code>data-dark</code> The path to the image shown in dark mode.</li>
  </ul>

  <p>
    <strong>Note:</strong> requires
    <code>eleventy:ignore</code>
  </p>

  <img
    class="theme-img"
    src="/static/img/library/img-sample-light.png"
    data-light="/static/img/library/img-sample-light.png"
    data-dark="/static/img/library/img-sample-dark.png"
    alt="light dark image"
    width="250"
    style="width: 250px"
    eleventy:ignore
  />
</section>

<section class="tooltip-section library-section cursor-hide">
  <h2 class="h5">[ Tooltip - Component or Util ]</h2>
  <p>
    A tooltip can be added in two ways: as a component or a utility class. Each
    method comes with different pros and cons.
  </p>
  <br />

  <h3 class="h6">Tooltip Component (fixed)</h3>
  <p>
    The component variation <code>tooltip.njk</code> comes with the following
    config options:
  </p>
  <ul class="classic-list">
    <li>
      <code>message</code> a string, this is the text within the message bubble.
    </li>
    <li>
      <code>text</code> an optional string that can be used as the tooltip
      trigger (vs an icon).
    </li>
    <li>
      <code>icon</code> an optional string used to override the default icon
      image. This is the path to the image source.
    </li>
    <li>
      <code>size</code> a string of either <code>xs | sm | md | lg</code> to
      adjust the tooltip message size. Defaults is <code>md</code>
    </li>
    <li>
      <code>place</code> a string of either
      <code>top | right | bottom | left</code> to position the tooltip bubble.
      Default is <code>top</code>
    </li>
  </ul>

  <!-- prettier-ignore -->
  {% set tooltip = library.tooltip.tooltip_1 %} 
  {% include "../_includes/library/components/tooltip.njk" %} 
  
  {% set tooltip = library.tooltip.tooltip_2 %} 
  {% include "../_includes/library/components/tooltip.njk" %}

  <div>
    <p>
      Does this work inline? {% set tooltip = library.tooltip.tooltip_3 %} {%
      include "../_includes/library/components/tooltip.njk" %} then some text
      afterward.
    </p>
  </div>

  <br aria-hidden="true" />
  <br aria-hidden="true" />
  <h3 class="h6">Tooltip Util (follows mouse)</h3>
  <strong>
    Note: requires mouse-cursor.njk component.
    <br />
    Also, the tooltip doesn't display while the user is scrolling. With Lenis
    this may cause a delay to see the tooltip.
  </strong>
  <p>
    The tooltip can also be tagged on any element using the class
    <code>tooltip-util</code> The configs are as follows:
  </p>
  <ul class="classic-list">
    <li>
      <code>data-tooltip-message</code> A string, this is the value of the
      message for the tooltip (perhaps see if this can take html).
    </li>
    <li>
      <code>data-tooltip-min-width</code> A number, this applies a minimum width
      to the message bubble.
    </li>
  </ul>

  <p>
    Tooltip util
    <span
      class="tooltip-util tab-element-page"
      data-tooltip-message="Recommended to use with keyboard accessible elements. Check resources to see if buttons are appropriate for this."
      data-tooltip-min-width="212"
      role="button"
      tabindex="0"
    >
      used with inline text
    </span>
    . Youâ€™ll notice that the text bubble is
    <span
      class="tooltip-util tab-element-page"
      data-tooltip-message="This will help make sure the text bubble/message is in view. Pretty sweet!"
      data-tooltip-min-width="250"
      role="button"
    >
      directionally aware
    </span>
    and will reposition based on the mouse position in the viewport.
  </p>
  <img
    class="tooltip-util icon-md tab-element-page"
    data-tooltip-message="What happens when you have a really long description? Does it mess things up pretty badly or does it still work? Iâ€™m curious how this will turn out."
    data-tooltip-min-width="250"
    src="/static/img/library/icon-google-info-circle.svg"
    alt=""
    role="button"
    tabindex="0"
    eleventy:ignore
  />
</section>

<section class="video-overlay-section library-section">
  <h2 class="h5">[ Video Overlay - Component ]</h2>
  <p>
    <strong>Note:</strong> While this is marked as a component due to the use of
    <code>video-overlay.njk</code> at the base of your app (scoped per page), it
    requires the class <code>video-toggle</code> to be read by the
    <code>video-overlay.js</code> file. Lastly, it requires the data source for
    the video file.
    <em>Generally dropbox can host these. Then just copy the share link.</em>
    The setup is simple:
  </p>
  <br />
  <ol class="classic-list">
    <li>
      Ensure you have the <code>video-overlay.njk</code> component and
      <code>video-overlay.js</code> file in your app.
    </li>
    <li>
      Add the utility class of <code>video-toggle</code> to your button/trigger.
    </li>
    <li>
      Provide the data- tag <code>data-vid-src</code> generally Dropbox can host
      these video files.
    </li>
    <li>That's it!</li>
  </ol>

  <!-- prettier-ignore -->
  {% set video_src = 'https://www.dropbox.com/scl/fi/6sh06eo6b3x84qo823qcq/sample-video-1.mp4?rlkey=0v6dqkra2wk7de0rz849ufm7o&st=0705ulra&dl=0' %}
  {% set btn = ({
    text: 'Toggle Video Overlay',
    type: 'solid',
    class: 'video-toggle glitch-hover',
    attributes: 'data-vid-src="'~video_src~'" aria-label="Toggle Video Overlay" aria-controls="video-overlay"'
   }) %}
  {% include "../_includes/components/btn.njk" %}

  <!-- prettier-ignore -->
  {% set video_src = 'https://www.dropbox.com/scl/fi/lqhy0y29fdlv28f81stg2/sample-video-2.mp4?rlkey=nl7r3h0nj61dhqk2yjp30gase&st=nyb73zpa&dl=0' %}
  {% set btn = ({
    text: 'Toggle Second Video',
    type: 'outline',
    class: 'video-toggle btn--bg-slide btn--split-text',
    attributes: 'data-vid-src="'~video_src~'" aria-label="Toggle Video Overlay" aria-controls="video-overlay" data-btn-slide="up" data-hover-alt'
   }) %}
  {% include "../_includes/components/btn.njk" %}
</section>
